unit Delphi.ORM.Query.Builder.Test;

interface

uses System.Rtti, DUnitX.TestFramework, Delphi.ORM.Query.Builder, Delphi.ORM.Database.Connection, Delphi.ORM.Attributes, Delphi.ORM.Test.Entity;

type
  [TestFixture]
  TQueryBuilderTest = class
  public
    [SetupFixture]
    procedure Setup;
    [Test]
    procedure IfNoCommandCalledTheSQLMustReturnEmpty;
    [Test]
    procedure WhenCallSelectCommandTheSQLMustReturnTheWordSelect;
    [Test]
    procedure IfNoCommandIsCalledCantRaiseAnExceptionOfAccessViolation;
    [Test]
    procedure WhenSelectAllFieldsFromAClassMustPutAllThenInTheResultingSQL;
    [Test]
    procedure IfTheAllFieldNoCalledCantRaiseAnExceptionOfAccessViolation;
    [Test]
    procedure OnlyPublishedPropertiesCanAppearInSQL;
    [Test]
    procedure WhenCallOpenProcedureMustOpenTheDatabaseCursor;
    [Test]
    procedure WhenOpenOneMustFillTheClassWithTheValuesOfCursor;
    [Test]
    procedure WhenAFilterConditionMustBuildTheSQLAsExpected;
    [Test]
    procedure IfNotExistsAFilterInWhereMustReturnTheQueryWithoutWhereCommand;
    [Test]
    procedure WhenCallInsertProcedureMustBuildTheSQLWithAllFieldsAndValuesFromTheClassParameter;
    [Test]
    procedure OnlyPublishedPropertiesMustAppearInInsertSQL;
    [Test]
    procedure OnlyPublishedPropertiesMustAppearInUpdateSQL;
    [Test]
    procedure WhenCallUpdateMustBuildTheSQLWithAllPropertiesInTheObjectParameter;
    [Test]
    procedure WhenTheClassHaveThePrimaryKeyAttributeMustBuildTheWhereWithTheValuesOfFieldInTheKeyList;
    [Test]
    procedure TheKeyFieldCantBeUpdatedInTheUpdateProcedure;
    [Test]
    procedure WhenTheClassDontHaveThePrimaryKeyAttributeCantRaiseAException;
    [Test]
    procedure WhenCallTheDeleteProcedureMustBuildTheSQLWithTheValuesOfKeysOfClass;
    [Test]
    procedure WhenTheClassDontHaveAnyPrimaryKeyTheDeleteMustBuildTheSQLWithoutWhereCondition;
    [Test]
    procedure TheClassBeingSelectedMustHaveTheAliasDefined;
    [Test]
    procedure TheFieldsHaveToBeGeneratedWithTheAliasOfTheRespectiveTables;
    [Test]
    procedure WhenClassHasOtherClassesLinkedToItYouHaveToGenerateTheJoinBetweenThem;
    [Test]
    procedure AllTheDirectForeignKeyMustBeGeneratedInTheResultingSQL;
    [Test]
    procedure TheForeignKeyMustBeLoadedRecursive;
    [Test]
    procedure WhenTheClassHaveForeignKeysThatsLoadsRecursivelyCantRaiseAnError;
    [Test]
    procedure MustGenerateTheSQLFollowingTheHierarchyAsSpected;
    [Test]
    procedure WhenConfiguredTheRecursivityLevelTheJoinsMustFollowTheConfiguration;
    [Test]
    procedure WhenTheClassRecursivelyItselfMoreThenOneTimeMustBuildTheSQLAsEspected;
    [Test]
    procedure WhenTheClassHaveManyValueAssociationMustLoadTheJoinBetweenTheParentAndChildTable;
    [Test]
    procedure TheManyValueAssociationMustAvoidRecursivilyLoadTheParentClassWhenLoadingTheChildClass;
    [Test]
    procedure WhenIsLoadedAJoinMustLoadTheFieldThatIsTheLinkBetweenTheClasses;
    [Test]
    procedure TheManyValueAssociationMustLoadTheLinkingFieldBetweenTheClasses;
    [Test]
    procedure WhenGetAllFieldsOfATableMustPutThePrimaryKeyFieldInTheBeginningOfTheResultingArray;
    [Test]
    procedure WhenAFieldIsMarkedWithAutoGeneratedItCantBeInTheInsertSQL;
    [Test]
    procedure WhenInsertAClassWithTheAutoGeneratedAttributeMustLoadTheFieldNamesInTheArrayOfTheProcedure;
    [Test]
    procedure TheValuesReturnedInTheCursorOfTheInsertMustLoadTheFieldsOfTheClassBeenInserted;
    [Test]
    procedure WhenDontHaveAResultingCursorCantLoadTheProperties;
    [Test]
    procedure WhenInsertingAClassWithManyValueAssociationCantPutThisTypeOfFieldInTheInsert;
    [Test]
    procedure WhenUpdatingAClassWithManyValueAssociationCantPutThisTypeOfFieldInTheUpdateList;
    [Test]
    procedure ThenForeignKeyLinkOfAnManyValueAssociationCantAppearInTheSQL;
    [Test]
    procedure WhenTheClassAsAFieldWithNullableRecordMustInsertTheValueNullInSQLIfIsNull;
    [Test]
    procedure WhenTheClassAsAFieldWithNullableRecordMustInsertThenValueOfThePropertyIfNotIsNull;
    [Test]
    procedure WhenTheClassAsAFieldWithNullableRecordMustUpdateTheValueNullInSQLIfIsNull;
    [Test]
    procedure WhenTheClassAsAFieldWithNullableRecordMustUpdateThenValueOfThePropertyIfNotIsNull;
    [Test]
    procedure WhenTryToSaveAnEntityWithThePrimaryKeyEmptyMustInsertTheEntity;
    [Test]
    procedure WhenTryToSaveAnEntityWithThePrimaryKeyFilledMustUpdateTheEntity;
    [Test]
    procedure WhenInsertingAClassWithTheKeyValueAlreadyLoadedMustInsertWithThisValue;
    [Test]
    procedure WhenUpdateAnEntityWithoutPrimaryKeyMustUpdateAllRecordFromTable;
    [Test]
    procedure WhenUseTheOrderByClauseMustLoadTheSQLHasExpected;
    [Test]
    procedure WhenTheJoinLinkIsFromAnInheritedClassMustMarkTheIsInheritedLinkHasTrue;
  end;

  [TestFixture]
  TQueryBuilderSelectTest = class
  public
    [SetupFixture]
    procedure Setup;
    [Test]
    procedure WhenIsNotDefinedTheRecursivityLevelMustBeOneTheDefaultValue;
    [Test]
    procedure WhenTheClassHaveForeignKeyMustBuildTheSQLWithTheAliasOfTheJoinMapped;
    [Test]
    procedure WhenFillTheFirstRecordsMustLoadThePropertyWithThePassedValue;
    [Test]
    procedure WhenFillTheFirstRecordsMustBuildTheSQLAsExpectedForSQLServer;
    [Test]
    procedure WhenSelectingATableAsAParameterMustUseThisParameterAndNotTryingToFindTheGenericTable;
  end;

  [TestFixture]
  TQueryBuilderFromTest = class
  public
    [SetupFixture]
    procedure Setup;
    [Test]
    procedure WhenCallFromFunctionMustLoadTheTablePropertyWithTheDataOfThatTable;
    [Test]
    procedure WhenCallFromFunctionWithAClassWithTwoForeignKeyAndOneOfThisIsSettedOfPrimaryKeyAttributeMustGenerateJoinComparingRightAliasLikePrimaryKeyOfClassForeign;
  end;

  [TestFixture]
  TQueryBuilderComparisonTest = class
  public
    [SetupFixture]
    procedure Setup;
    [Test]
    procedure WhenCallTheFieldFuncitionMustLoadTheFieldNameInTheLeftOperator;
    [Test]
    procedure WhenCompareTheFieldWithAStringValueMustLoadTheComparisonAsExpected;
    [TestCase('Between', 'qbcoBetween')]
    [TestCase('Equal', 'qbcoEqual')]
    [TestCase('Not Equal', 'qbcoNotEqual')]
    [TestCase('Greater Than', 'qbcoGreaterThan')]
    [TestCase('Greater Than Or Equal', 'qbcoGreaterThanOrEqual')]
    [TestCase('Less Than', 'qbcoLessThan')]
    [TestCase('Less Than Or Equal', 'qbcoLessThanOrEqual')]
    [TestCase('Null', 'qbcoNull')]
    [TestCase('Not Null', 'qbcoNotNull')]
    [TestCase('Like', 'qbcoLike')]
    procedure WhenCompareTheFieldWithAnIntegerValueMustLoadTheComparisonAsExpected(Operation: TQueryBuilderComparisonOperator);
    [Test]
    procedure WhenToUseTheOperatorAndHaveToGenerateALogicalOperationWithFilledComparisons;
    [Test]
    procedure WhenToUseTheOperatorAndHaveToGenerateALogicalOperationWithOperationAndFilled;
    [Test]
    procedure WhenToUseTheOperatorOrHaveToGenerateALogicalOperationWithFilledComparisons;
    [Test]
    procedure WhenToUseTheOperatorOrHaveToGenerateALogicalOperationWithOperationOrFilled;
    [Test]
    procedure WhenTheAndOperatorIsCalledMustLoadTheLeftFieldWithTheLeftValueComparisonAndTheRightFieldWithTheRightValueComparision;
    [Test]
    procedure WhenTheOrOperatorIsCalledMustLoadTheLeftFieldWithTheLeftValueComparisonAndTheRightFieldWithTheRightValueComparision;
    [Test]
    procedure WhenAndOperatorMustLoadTheOperationWithTheAndValue;
    [Test]
    procedure WhenOrOperatorMustLoadTheOperationWithTheOrValue;
    [Test]
    procedure WhenForASimpleComparisonYouHaveToAssembleTheLogicalOperatorWithComparisonTypeValuesInOperationAnd;
    [Test]
    procedure WhenForASimpleComparisonYouHaveToAssembleTheLogicalOperatorWithComparisonTypeValuesInOperationOr;
    [Test]
    procedure WhenOperationLeftIsAComparisonAndRightIsALogicalOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheValueOfComparisonAndRightWithTheLogicalOperationInTheAndOperation;
    [Test]
    procedure WhenOperationLeftIsAComparisonAndRightIsALogicalOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheValueOfComparisonAndRightWithTheLogicalOperationInTheOrOperation;
    [Test]
    procedure WhenOperationLeftIsALogicalAndRightIsAComparisonOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheLogicalOperationAndRightWithTheValueOfComparisonInTheAndOperation;
    [Test]
    procedure WhenOperationLeftIsALogicalAndRightIsAComparisonOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheLogicalOperationAndRightWithTheValueOfComparisonInTheOrOperation;
    [Test]
    procedure WhenBothOperatorAreLogicalMustCreateANewLogicalOperationWithBothValuesInAndOperator;
    [Test]
    procedure WhenBothOperatorAreLogicalMustCreateANewLogicalOperationWithBothValuesInOrOperator;
  end;

  [TestFixture]
  TQueryBuilderAllFieldsTest = class
  public
    [SetupFixture]
    procedure Setup;
    [Test]
    procedure InASingleClassMustLoadAllFieldsFromThatClass;
    [Test]
    procedure WhenTheClassHaveForeignKeyMustLoadAllFieldsOfAllClassesInvolved;
    [Test]
    procedure FieldsOfAnObjectCantBeLoadedInTheListOfFields;
    [Test]
    procedure TheFieldsMustBeLoadedRecursivelyInAllForeignKeys;
    [Test]
    procedure WhenTheClassIsRecursiveItselfCantRaiseAnErrorInTheExecution;
    [Test]
    procedure TheRecursivelyMustBeRespectedAndLoadAllFieldFromTheClasses;
    [Test]
    procedure WhenThePropertyIsAnArrayCantLoadTheFieldInTheList;
    [Test]
    procedure WhenAFieldIsLazyLoadingThisMustLoadInFieldList;
  end;

  [TestFixture]
  TQueryBuilderWhereTest = class
  public
    [SetupFixture]
    procedure Setup;
    [Test]
    procedure WhenCompareAFieldWithAnValueMustBuildTheFilterAsExpected;
    [Test]
    procedure ASimpleLogicalAndOperationMustBeGeneratedAsExpected;
    [Test]
    procedure ASimpleLogicalOrOperationMustBeGeneratedAsExpected;
    [Test]
    procedure AComposeLogicalOperationMustBeGeneratedAsExpected;
    [Test]
    procedure WhenLeftOperationIsASimpleComparisonAndRightIsALogicalOperationItHasToGenerateSQLAsExpected;
    [Test]
    procedure WhenBothOperationsAreLogicalHaveToGenerateSQLAsExpected;
    [TestCase('Between', 'qbcoBetween')]
    [TestCase('None', 'qbcoNone')]
    [TestCase('Equal', 'qbcoEqual')]
    [TestCase('Not Equal', 'qbcoNotEqual')]
    [TestCase('Greater Than', 'qbcoGreaterThan')]
    [TestCase('Greater Than Or Equal', 'qbcoGreaterThanOrEqual')]
    [TestCase('Less Than', 'qbcoLessThan')]
    [TestCase('Less Than Or Equal', 'qbcoLessThanOrEqual')]
    [TestCase('Like', 'qbcoLike')]
    [TestCase('Null', 'qbcoNull')]
    [TestCase('Not Null', 'qbcoNotNull')]
    procedure TheComparisonOperatorsMustBeGeneratedAsExpected(Operation: TQueryBuilderComparisonOperator);
    [Test]
    procedure IfTheWhereDontFoundTheFieldMustRaiseAnError;
    [Test]
    procedure WhenExistsAJoinLoadedMustPutTheAliasOfTheTableBeforeTheFieldName;
    [Test]
    procedure WhenUsingAComposeNameMustPutTheAliasOfTheTableBeforeTheFieldName;
    [TestCase('AnsiChar', 'AnsiChar,''C''')]
    [TestCase('AnsiString', 'AnsiString,''AnsiString''')]
    [TestCase('Char', 'Char,''C''')]
    [TestCase('Class', 'Class,1234')]
    [TestCase('Enumerator', 'Enumerator,1')]
    [TestCase('Empty class', 'EmptyClass,null')]
    [TestCase('Float', 'Float,1234.456')]
    [TestCase('Date', 'Date,''2020-01-31''')]
    [TestCase('DateTime', 'DateTime,''2020-01-31 12:34:56''')]
    [TestCase('GUID', 'GUID,''{BD2BBA84-C691-4C5E-ABD3-4F32937C53F8}''')]
    [TestCase('Integer', 'Integer,1234')]
    [TestCase('Int64', 'Int64,1234')]
    [TestCase('String', 'String,''String''')]
    [TestCase('Time', 'Time,''12:34:56''')]
    procedure TheComparisonOfTheValuesMustOccurAsExpected(TypeToConvert, ValueToCompare: String);
    [Test]
    procedure TheLasNameInTheComposeNameMustBeTheFieldToBeFoundInAClass;
    [TestCase('Between', 'qbcoBetween')]
    [TestCase('None', 'qbcoNone')]
    [TestCase('Equal', 'qbcoEqual')]
    [TestCase('Not Equal', 'qbcoNotEqual')]
    [TestCase('Greater Than', 'qbcoGreaterThan')]
    [TestCase('Greater Than Or Equal', 'qbcoGreaterThanOrEqual')]
    [TestCase('Less Than', 'qbcoLessThan')]
    [TestCase('Less Than Or Equal', 'qbcoLessThanOrEqual')]
    [TestCase('Null', 'qbcoNull')]
    [TestCase('Not Null', 'qbcoNotNull')]
    procedure WhenComparingFieldMustBuildTheFilterAsExpected(Operation: TQueryBuilderComparisonOperator);
    [TestCase('Between', 'qbcoBetween')]
    [TestCase('None', 'qbcoNone')]
    [TestCase('Equal', 'qbcoEqual')]
    [TestCase('Not Equal', 'qbcoNotEqual')]
    [TestCase('Greater Than', 'qbcoGreaterThan')]
    [TestCase('Greater Than Or Equal', 'qbcoGreaterThanOrEqual')]
    [TestCase('Less Than', 'qbcoLessThan')]
    [TestCase('Less Than Or Equal', 'qbcoLessThanOrEqual')]
    [TestCase('Null', 'qbcoNull')]
    [TestCase('Not Null', 'qbcoNotNull')]
    procedure WhenComparingEnumeratorTheComparisonMustHappenAsExpected(Operation: TQueryBuilderComparisonOperator);
    [Test]
    procedure WhenTheClassIsRecursiveInItselfHasToPutTheRightAlias;
    [Test]
    procedure WhenAPropertyIsLazyLoadingCantAppearInTheFromClause;
    [TestCase('Equal', 'qbcoEqual')]
    [TestCase('Not Equal', 'qbcoNotEqual')]
    [TestCase('Greater Than', 'qbcoGreaterThan')]
    [TestCase('Greater Than Or Equal', 'qbcoGreaterThanOrEqual')]
    [TestCase('Less Than', 'qbcoLessThan')]
    [TestCase('Less Than Or Equal', 'qbcoLessThanOrEqual')]
    procedure WhenTheComparisionWithADateMustCreateTheComparisionAsExpected(Operation: TQueryBuilderComparisonOperator);
    [TestCase('Equal', 'qbcoEqual')]
    [TestCase('Not Equal', 'qbcoNotEqual')]
    [TestCase('Greater Than', 'qbcoGreaterThan')]
    [TestCase('Greater Than Or Equal', 'qbcoGreaterThanOrEqual')]
    [TestCase('Less Than', 'qbcoLessThan')]
    [TestCase('Less Than Or Equal', 'qbcoLessThanOrEqual')]
    procedure WhenTheComparisionWithADateTimeMustCreateTheComparisionAsExpected(Operation: TQueryBuilderComparisonOperator);
    [TestCase('Equal', 'qbcoEqual')]
    [TestCase('Not Equal', 'qbcoNotEqual')]
    [TestCase('Greater Than', 'qbcoGreaterThan')]
    [TestCase('Greater Than Or Equal', 'qbcoGreaterThanOrEqual')]
    [TestCase('Less Than', 'qbcoLessThan')]
    [TestCase('Less Than Or Equal', 'qbcoLessThanOrEqual')]
    procedure WhenTheComparisionWithATimeMustCreateTheComparisionAsExpected(Operation: TQueryBuilderComparisonOperator);
    [Test]
    procedure WhenTheClassIsInheritedMustFindTheFieldInTheBaseClass;
    [Test]
    procedure WhenBuildingTheFilterMustCheckTheFieldsJoinsIfExistsAndRaiseAnErrorIfNotFind;
    [Test]
    procedure WhenTheWhereFilterUsesAFieldFromABaseClassCantRaiseAnyError;
  end;

  [TestFixture]
  TQueryBuilderDataManipulationTest = class
  public
    [SetupFixture]
    procedure SetupFixture;
    [Test]
    procedure WhenCallInsertMustStartATransactionInDatabase;
    [Test]
    procedure WhenTheInsertOccursSuccessfullyMustCommitTheTransaction;
    [Test]
    procedure TheInsertionErrorMustBeRaiseAfterTheRollbackTheTransaction;
    [Test]
    procedure WhenAnInsertErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
    [Test]
    procedure WhenCallUpdateMustStartATransactionInDatabase;
    [Test]
    procedure WhenTheUpdateOccursSuccessfullyMustCommitTheTransaction;
    [Test]
    procedure TheUpdateErrorMustRaiseAfterTheRollbackTheTransaction;
    [Test]
    procedure WhenAnUpdateErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
    [Test]
    procedure WhenCallDeleteMustStartATransactionInDatabase;
    [Test]
    procedure WhenTheDeleteOccursSuccessfullyMustCommitTheTransaction;
    [Test]
    procedure WhenAnDeleteErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
    [Test]
    procedure TheDeleteErrorMustRaiseAfterTheRollbackTheTransaction;
    [Test]
    procedure WhenCallSaveMustStartATransactionInDatabase;
    [Test]
    procedure WhenTheSaveOccursSuccessfullyMustCommitTheTransaction;
    [Test]
    procedure WhenAnSaveErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
    [Test]
    procedure TheSaveErrorMustRaiseAfterTheRollbackTheTransaction;
    [Test]
    procedure WhenInsertAnEntityMustSaveTheForeignKeysFirstAfterThisMustInsertTheEntity;
    [Test]
    procedure WhenUpdateAnEntityMustSaveTheForeignKeysFirstAfterThisMustUpdateTheEntity;
    [Test]
    procedure WhenThenObjectOfAForeignKeyIsNilCantRaiseAnyError;
    [Test]
    procedure WhenInsertAnEntityMustSaveTheManyValueAssociationsAfterInsertedTheEntity;
    [Test]
    procedure WhenUpdateAnEntityMustSaveTheManyValueAssociationsAfterUpdatedTheEntity;
    [Test]
    procedure WhenSaveAManyValueAssocitationEntityMustLoadTheParentObjectInTheChildObjects;
    [Test]
    procedure WhenSaveAManyValueAssocitationEntityMustAvoidSaveTheParentLinkOfTheChildToAvoidStackOverflow;
    [Test]
    procedure WhenInsertingAnEntityInheritedFromAnotherMustInsertTheParentClassFirst;
    [Test]
    procedure WhenSavingAnEntityInheritedFromAnotherTableCantRaiseAnyError;
    [Test]
    procedure WhenInsertingAClassMustInsertOnlyTheForeignKeyWithInsertCascadeAttribute;
    [Test]
    procedure WhenUpdatingAClassMustInsertOnlyTheForeignKeyWithUpdateCascadeAttribute;
    [Test]
    procedure WhenTryToUpdateAClassThatIsNotCachedHaveToRaiseAnError;
    [Test]
    procedure WhenUpdateAClassMustUpdateOnlyTheChangedFields;
    [Test]
    procedure TheValuesFromTheForeignObjectMustBeLoadedInTheCachedObject;
    [Test]
    procedure WhenInsertANewObjectThisObjectMustBeAddedToTheCache;
    [Test]
    procedure ReadOnlyFieldsCantBeUpdatedInUpdateFunction;
    [Test]
    procedure WhenNoFieldIsUpdatedCantRunAnySQL;
    [Test]
    procedure AfterUpdateAnObjectTheForeignObjectMustBeDestroyed;
    [Test]
    procedure WhenUpdateAnInheritedClassCantRaiseAccessViolationInTheDestructionProcess;
    [Test]
    procedure WhenUpdateAClassWithManyValueAssociationMustUpdateTheListOfTheObjectInTheCache;
    [Test]
    procedure WhenInsertingAInheritedClassCantRaiseErrorFromDuplicateCacheValue;
    [Test]
    procedure WhenInsertAnObjectMustReturnTheObjectFromTheCache;
    [Test]
    procedure WhenUpdateAnObjectMustReturnTheObjectFromTheCache;
    [Test]
    procedure WhenSaveAnObjectMustReturnTheObjectFromTheCache;
    [Test]
    procedure WhenUpdatingTheCachedObjectCantDestroyTheObject;
    [Test]
    procedure WhenUpdatingTheCachedObjectMustUpdateAllFieldsFromTheClass;
    [Test]
    procedure AfterInsertTheObjectInDatabaseMustAddAStateObjectToTheCache;
    [Test]
    procedure TheStateObjectMustCopyTheValueOfAllPropertiesFromTheOriginalObject;
    [Test]
    procedure WhenUpdateAnObjectWithManyValueAssociationTheParentForeignKeyOfTheChildObjectMustBeTheReferenceToTheCacheObject;
    [Test]
    procedure AfterUpdateTheManyValueAssociationMustUpdateTheReferenceOfTheObjectInTheChildList;
    [Test]
    procedure WhenUpdateAnEntityWithAnForeignKeyInTheCacheCantRaiseAnyError;
    [Test]
    procedure WhenUpdateAnEntityAndForeignKeyIsInTheCaheMustUpdateTheReferenceWithThisObject;
  end;

  [TestFixture]
  TQueryBuilderOrderByTeste = class
  public
    [SetupFixture]
    procedure SetupFixture;
    [Test]
    procedure EveryTimeTheFieldFunctionFromOrderByIsCalledMustAddTheFieldList;
    [Test]
    procedure WhenCallTheFieldFunctionMustAddTheFieldAliasToTheFieldList;
    [Test]
    procedure WhenTheFieldListIsEmptyMustReturnAnEmptySQLValue;
    [Test]
    procedure WhenTheFieldListIsNotEmptyMustReturnTheOrderByClauseWithTheFieldList;
    [Test]
    procedure WhenTheFieldIsDescendingMustLoadTheSQLAsExpected;
    [Test]
    procedure WhenCallTheFieldProcedureMustResultTheSelfOfTheOrderByClass;
  end;

  [TestFixture]
  TQueryBuilderFieldAliasTest = class
  public
    [Test]
    procedure WhenCreateMustLoadThePropertyFieldNameOfTheClass;
    [Test]
    procedure WhenTheFieldNameIsSeparetedByDotMustLoadTheFieldNamesWithTheNames;
  end;

  TDatabaseTest = class(TInterfacedObject, IDatabaseConnection)
  private
    FCursor: IDatabaseCursor;
    FSQL: String;
    FOutputFields: TArray<String>;

    function ExecuteInsert(const SQL: String; const OutputFields: TArray<String>): IDatabaseCursor;
    function OpenCursor(const SQL: String): IDatabaseCursor;
    function StartTransaction: IDatabaseTransaction;

    procedure ExecuteDirect(const SQL: String);
    procedure SaveSQL(const SQL: String);
  public
    constructor Create(const Cursor: IDatabaseCursor); 

    property SQL: String read FSQL;
    property OutputFields: TArray<String> read FOutputFields;
  end;

  TMyEnum = (Enum1, Enum2, Enum3);

implementation

uses System.SysUtils, System.DateUtils, Delphi.ORM.Mapper, Delphi.ORM.Cursor.Mock, Delphi.ORM.Nullable, Delphi.ORM.Cache, Delphi.Mock, Delphi.ORM.Rtti.Helper,
  Delphi.ORM.Shared.Obj;

const
  COMPARISON_OPERATOR: array[TQueryBuilderComparisonOperator] of String = ('', '=', '<>', '>', '>=', '<', '<=', '', '', '', '');

procedure AddObjectToCache(const Cache: ICache; const Obj: TObject; const KeyValue: TValue);
begin
  Cache.Add(Format('Delphi.ORM.Test.Entity.%s.%s', [Obj.ClassName, KeyValue.GetAsString]), TStateObject.Create(Obj, True) as ISharedObject);
end;

function CreateDatabaseConnection: TDatabaseTest;
begin
  Result := TDatabaseTest.Create(TCursorMock.Create(nil));
end;

function CreateQueryBuilder(const Connection: IDatabaseConnection; Cache: ICache; const Obj: TObject; const KeyValue: TValue): TQueryBuilder; overload;
begin
  if not Assigned(Cache) then
    Cache := TCache.Create;

  if Assigned(Obj) then
    AddObjectToCache(Cache, Obj, KeyValue);

  Result := TQueryBuilder.Create(Connection, Cache);
end;

function CreateQueryBuilder(const Connection: IDatabaseConnection; const Cache: ICache): TQueryBuilder; overload;
begin
  Result := CreateQueryBuilder(Connection, Cache, nil, TValue.Empty);
end;

function CreateQueryBuilder(const Connection: IDatabaseConnection; const Obj: TObject; const KeyValue: TValue): TQueryBuilder; overload;
begin
  Result := CreateQueryBuilder(Connection, nil, Obj, KeyValue);
end;

function CreateQueryBuilder(const Connection: IDatabaseConnection): TQueryBuilder; overload;
begin
  Result := CreateQueryBuilder(Connection, nil);
end;

function CreateQueryBuilder(const Obj: TObject; const KeyValue: TValue): TQueryBuilder; overload;
begin
  Result := CreateQueryBuilder(CreateDatabaseConnection, nil, Obj, KeyValue);
end;

function CreateQueryBuilder: TQueryBuilder; overload;
begin
  Result := CreateQueryBuilder(CreateDatabaseConnection);
end;

{ TQueryBuilderTest }

procedure TQueryBuilderTest.AllTheDirectForeignKeyMustBeGeneratedInTheResultingSQL;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TClassWithTwoForeignKey>;

  Assert.AreEqual(' from ClassWithTwoForeignKey T1 left join ClassWithPrimaryKey T2 on T1.IdAnotherClass=T2.Id left join ClassWithPrimaryKey T3 on T1.IdAnotherClass2=T3.Id', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.IfNoCommandCalledTheSQLMustReturnEmpty;
begin
  var Query := CreateQueryBuilder;

  Assert.AreEqual(EmptyStr, Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.IfNoCommandIsCalledCantRaiseAnExceptionOfAccessViolation;
begin
  var Query := CreateQueryBuilder;

  Assert.WillNotRaise(
    procedure
    begin
      Query.GetSQL
    end, EAccessViolation);

  Query.Free;
end;

procedure TQueryBuilderTest.IfNotExistsAFilterInWhereMustReturnTheQueryWithoutWhereCommand;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  Query.Select.All.From<TMyTestClass>.Open;

  Assert.AreEqual('select T1.Field F1,T1.Name F2,T1.Value F3 from MyTestClass T1', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.IfTheAllFieldNoCalledCantRaiseAnExceptionOfAccessViolation;
begin
  var Query := CreateQueryBuilder;

  Query.Select;

  Assert.WillNotRaise(
    procedure
    begin
      Query.GetSQL;
    end, EAccessViolation);

  Query.Free;
end;

procedure TQueryBuilderTest.MustGenerateTheSQLFollowingTheHierarchyAsSpected;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TClassHierarchy1>;

  Assert.AreEqual(
        ' from ClassHierarchy1 T1 ' +
    'left join ClassHierarchy2 T2 ' +
           'on T1.IdClass1=T2.Id ' +
    'left join ClassHierarchy1 T3 ' +
           'on T2.IdClass3=T3.Id ' +
    'left join ClassHierarchy3 T4 ' +
           'on T3.IdClass2=T4.Id ' +
    'left join ClassHierarchy1 T5 ' +
           'on T2.IdClass4=T5.Id ' +
    'left join ClassHierarchy3 T6 ' +
           'on T5.IdClass2=T6.Id ' +
    'left join ClassHierarchy3 T7 ' +
           'on T1.IdClass2=T7.Id', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.OnlyPublishedPropertiesMustAppearInInsertSQL;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TClassOnlyPublic.Create;
  MyClass.Name := 'My name';
  MyClass.Value := 222;

  Query.Insert(MyClass);

  Assert.AreEqual('insert into ClassOnlyPublic()values()', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.OnlyPublishedPropertiesMustAppearInUpdateSQL;
begin
  var Database := TDatabaseTest.Create(nil);
  var MyClass := TClassOnlyPublic.Create;
  MyClass.Name := 'My name';
  MyClass.Value := 222;
  var Query := CreateQueryBuilder(Database, TClassOnlyPublic.Create, '');

  Query.Update(MyClass);

  Assert.IsEmpty(Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.Setup;
begin
  TMapper.Default.LoadAll;

  TMock.CreateInterface<IDatabaseTransaction>;
end;

procedure TQueryBuilderTest.TheClassBeingSelectedMustHaveTheAliasDefined;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TMyTestClass>;

  Assert.AreEqual(' from MyTestClass T1', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.TheFieldsHaveToBeGeneratedWithTheAliasOfTheRespectiveTables;
begin
  var Query := CreateQueryBuilder;

  Query.Select.All.From<TMyTestClass>;

  Assert.AreEqual('select T1.Field F1,T1.Name F2,T1.Value F3 from MyTestClass T1', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.TheForeignKeyMustBeLoadedRecursive;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TClassWithForeignKeyRecursive>;

  Assert.AreEqual(' from ClassWithForeignKeyRecursive T1 left join ClassWithForeignKey T2 on T1.IdAnotherClass=T2.Id left join ClassWithPrimaryKey T3 on T2.IdAnotherClass=T3.Id', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.TheKeyFieldCantBeUpdatedInTheUpdateProcedure;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database, TClassWithPrimaryKeyAttribute.Create, 456);
  var SQL := 'update ClassWithPrimaryKeyAttribute set Id=123,Value=222';

  var MyClass := TClassWithPrimaryKeyAttribute.Create;
  MyClass.Id := 123;
  MyClass.Id2 := 456;
  MyClass.Value := 222;

  Query.Update(MyClass);

  Assert.AreEqual(SQL, Database.SQL.Substring(0, SQL.Length));

  Query.Free;
end;

procedure TQueryBuilderTest.TheManyValueAssociationMustAvoidRecursivilyLoadTheParentClassWhenLoadingTheChildClass;
begin
  var From := TQueryBuilderFrom.Create(nil, 5);

  From.From<TMyEntityWithManyValueAssociation>;

  Assert.AreEqual(
        ' from MyEntityWithManyValueAssociation T1 ' +
    'left join MyEntityWithManyValueAssociationChild T2 ' +
           'on T1.Id=T2.IdManyValueAssociation',
    From.GetSQL);

  From.Free;
end;

procedure TQueryBuilderTest.TheManyValueAssociationMustLoadTheLinkingFieldBetweenTheClasses;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  From.From<TMyEntityWithManyValueAssociation>;

  Assert.IsNotNull(From.Join.Links[0].Field);

  From.Free;
end;

procedure TQueryBuilderTest.ThenForeignKeyLinkOfAnManyValueAssociationCantAppearInTheSQL;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  From.From<TManyValueAssociationParent>;

  Assert.AreEqual(
        ' from ManyValueAssociationParent T1 ' +
    'left join ManyValueAssociationWithThreeForeignKey T2 ' +
           'on T1.Id=T2.IdManyValueAssociationParent ' +
    'left join ManyValueAssociationParent T3 ' +
           'on T2.IdForeignKeyOne=T3.Id ' +
    'left join ManyValueAssociationParent T4 ' +
           'on T2.IdForeignKeyTwo=T4.Id',
    From.GetSQL);

  From.Free;
end;

procedure TQueryBuilderTest.TheValuesReturnedInTheCursorOfTheInsertMustLoadTheFieldsOfTheClassBeenInserted;
begin
  var Database := TDatabaseTest.Create(TCursorMock.Create([[123, 'My value']]));
  var Query := CreateQueryBuilder(Database);

  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Value := 'abc';

  Query.Insert(MyClass);

  Assert.AreEqual(123, MyClass.Id);
  Assert.AreEqual('My value', MyClass.AnotherField);

  Query.Free;
end;

procedure TQueryBuilderTest.OnlyPublishedPropertiesCanAppearInSQL;
begin
  var Query := CreateQueryBuilder;

  Query.Select.All.From<TMyTestClass>;

  Assert.AreEqual('select T1.Field F1,T1.Name F2,T1.Value F3 from MyTestClass T1', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenAFieldIsMarkedWithAutoGeneratedItCantBeInTheInsertSQL;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Value := 'abc';

  Query.Insert(MyClass);

  Assert.AreEqual('insert into AutoGeneratedClass(Value)values(''abc'')', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenAFilterConditionMustBuildTheSQLAsExpected;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  Query.Select.All.From<TMyTestClass>.Where(Field('Field') = 1234).Open;

  Assert.AreEqual('select T1.Field F1,T1.Name F2,T1.Value F3 from MyTestClass T1 where T1.Field=1234', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenCallInsertProcedureMustBuildTheSQLWithAllFieldsAndValuesFromTheClassParameter;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TMyTestClass.Create;
  MyClass.Field := 123;
  MyClass.Name := 'My name';
  MyClass.Value := 222.333;

  Query.Insert(MyClass);

  Assert.AreEqual('insert into MyTestClass(Field,Name,Value)values(123,''My name'',222.333)', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenCallOpenProcedureMustOpenTheDatabaseCursor;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  Query.Select.All.From<TMyTestClass>.Open;

  Assert.AreEqual('select T1.Field F1,T1.Name F2,T1.Value F3 from MyTestClass T1', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenCallSelectCommandTheSQLMustReturnTheWordSelect;
begin
  var Query := CreateQueryBuilder;

  Query.Select;

  Assert.AreEqual('select ', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenCallTheDeleteProcedureMustBuildTheSQLWithTheValuesOfKeysOfClass;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  var MyClass := TClassWithPrimaryKeyAttribute.Create;
  MyClass.Id2 := 456;

  Query.Delete(MyClass);

  Assert.AreEqual('delete from ClassWithPrimaryKeyAttribute where Id2=456', Database.SQL);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderTest.WhenCallUpdateMustBuildTheSQLWithAllPropertiesInTheObjectParameter;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database, TMyTestClass.Create, '');

  var MyClass := TMyTestClass.Create;
  MyClass.Field := 123;
  MyClass.Name := 'My name';
  MyClass.Value := 222.333;

  Query.Update(MyClass);

  Assert.AreEqual('update MyTestClass set Field=123,Name=''My name'',Value=222.333', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenClassHasOtherClassesLinkedToItYouHaveToGenerateTheJoinBetweenThem;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TClassWithForeignKey>;

  Assert.AreEqual(' from ClassWithForeignKey T1 left join ClassWithPrimaryKey T2 on T1.IdAnotherClass=T2.Id', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenConfiguredTheRecursivityLevelTheJoinsMustFollowTheConfiguration;
begin
  var Query := CreateQueryBuilder;

  var From := Query.Select.RecursivityLevel(3).All;

  From.From<TClassRecursiveFirst>;

  Assert.AreEqual(
            ' from ClassRecursiveFirst T1 ' +
        'left join ClassRecursiveThrid T2 ' +
               'on T1.IdRecursive=T2.Id ' +
        'left join ClassRecursiveSecond T3 ' +
               'on T2.IdRecursive=T3.Id ' +
        'left join ClassRecursiveFirst T4 ' +
               'on T3.IdRecursive=T4.Id ' +
        'left join ClassRecursiveThrid T5 ' +
               'on T4.IdRecursive=T5.Id ' +
        'left join ClassRecursiveSecond T6 ' +
               'on T5.IdRecursive=T6.Id ' +
        'left join ClassRecursiveFirst T7 ' +
               'on T6.IdRecursive=T7.Id ' +
        'left join ClassRecursiveThrid T8 ' +
               'on T7.IdRecursive=T8.Id ' +
        'left join ClassRecursiveSecond T9 ' +
               'on T8.IdRecursive=T9.Id ' +
        'left join ClassRecursiveFirst T10 ' +
               'on T9.IdRecursive=T10.Id',
    From.GetSQL);

  Query.GetSQL;

  Query.Free;
end;

procedure TQueryBuilderTest.WhenDontHaveAResultingCursorCantLoadTheProperties;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Value := 'abc';

  Query.Insert(MyClass);

  Assert.AreEqual(0, MyClass.Id);
  Assert.AreEqual(EmptyStr, MyClass.AnotherField);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenGetAllFieldsOfATableMustPutThePrimaryKeyFieldInTheBeginningOfTheResultingArray;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var Fields := TQueryBuilderAllFields.Create(From);

  From.From<TMyEntityWithPrimaryKeyInLastField>;

  Assert.IsTrue(Fields.GetFields[0].Field.InPrimaryKey);

  From.Free;

  Fields.Free;
end;

procedure TQueryBuilderTest.WhenInsertAClassWithTheAutoGeneratedAttributeMustLoadTheFieldNamesInTheArrayOfTheProcedure;
begin
  var Database := TDatabaseTest.Create(TCursorMock.Create([[123, 'My value']]));
  var Query := CreateQueryBuilder(Database);

  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Value := 'abc';

  Query.Insert(MyClass);

  Assert.AreEqual('Id', Database.OutputFields[0]);
  Assert.AreEqual('AnotherField', Database.OutputFields[1]);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenInsertingAClassWithManyValueAssociationCantPutThisTypeOfFieldInTheInsert;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TMyEntityWithManyValueAssociation.Create;
  MyClass.Id := 12345;

  Query.Insert(MyClass);

  Assert.AreEqual('insert into MyEntityWithManyValueAssociation(Id)values(12345)', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenInsertingAClassWithTheKeyValueAlreadyLoadedMustInsertWithThisValue;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Id := 1234;
  MyClass.Value := 'abc';

  Query.Insert(MyClass);

  Assert.AreEqual('insert into AutoGeneratedClass(Id,Value)values(1234,''abc'')', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenIsLoadedAJoinMustLoadTheFieldThatIsTheLinkBetweenTheClasses;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TClassWithForeignKey>;

  Assert.IsNotNull(Query.Join.Links[0].Field);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenOpenOneMustFillTheClassWithTheValuesOfCursor;
begin
  var Database := TDatabaseTest.Create(TCursorMock.Create([[123, 'My name', 123.456]]));
  var Query := CreateQueryBuilder(Database);

  var Result := Query.Select.All.From<TMyTestClass>.Open.One;

  Assert.AreEqual(123, Result.Field);

  Assert.AreEqual('My name', Result.Name);

  Assert.AreEqual<Double>(123.456, Result.Value);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenSelectAllFieldsFromAClassMustPutAllThenInTheResultingSQL;
begin
  var Query := CreateQueryBuilder;

  Query.Select.All.From<TMyTestClass>;

  Assert.AreEqual('select T1.Field F1,T1.Name F2,T1.Value F3 from MyTestClass T1', Query.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassAsAFieldWithNullableRecordMustInsertThenValueOfThePropertyIfNotIsNull;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TClassWithNullableProperty.Create;
  MyClass.Nullable := 1234;

  Query.Insert(MyClass);

  Assert.AreEqual('insert into ClassWithNullableProperty(Id,Nullable)values(0,1234)', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassAsAFieldWithNullableRecordMustInsertTheValueNullInSQLIfIsNull;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var MyClass := TClassWithNullableProperty.Create;

  Query.Insert(MyClass);

  Assert.AreEqual('insert into ClassWithNullableProperty(Id,Nullable)values(0,null)', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassAsAFieldWithNullableRecordMustUpdateThenValueOfThePropertyIfNotIsNull;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database, TClassWithNullableProperty.Create, 123);

  var MyClass := TClassWithNullableProperty.Create;
  MyClass.Id := 123;
  MyClass.Nullable := 456;

  Query.Update(MyClass);

  Assert.AreEqual('update ClassWithNullableProperty set Nullable=456 where Id=123', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassAsAFieldWithNullableRecordMustUpdateTheValueNullInSQLIfIsNull;
begin
  var Database := CreateDatabaseConnection;
  var MyClass := TClassWithNullableProperty.Create;
  MyClass.Id := 123;
  var MyClassCache := TClassWithNullableProperty.Create;
  MyClassCache.Id := 123;
  MyClassCache.Nullable := 123;
  var Query := CreateQueryBuilder(Database, MyClassCache, 123);

  Query.Update(MyClass);

  Assert.AreEqual('update ClassWithNullableProperty set Nullable=null where Id=123', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassDontHaveAnyPrimaryKeyTheDeleteMustBuildTheSQLWithoutWhereCondition;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  var MyClass := TMyTestClass.Create;

  Query.Delete(MyClass);

  Assert.AreEqual('delete from MyTestClass', Database.SQL);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassDontHaveThePrimaryKeyAttributeCantRaiseAException;
begin
  var Database := TDatabaseTest.Create(nil);
  var MyClass := TClassOnlyPublic.Create;
  var Query := CreateQueryBuilder(Database);

  Assert.WillNotRaise(
    procedure
    begin
      Query.Update(MyClass);
    end, EAccessViolation);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassHaveForeignKeysThatsLoadsRecursivelyCantRaiseAnError;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Assert.WillNotRaise(
    procedure
    begin
      Query.From<TClassRecursiveFirst>;

      Query.GetSQL;
    end);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassHaveManyValueAssociationMustLoadTheJoinBetweenTheParentAndChildTable;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  From.From<TMyEntityWithManyValueAssociation>;

  Assert.AreEqual(
        ' from MyEntityWithManyValueAssociation T1 ' +
    'left join MyEntityWithManyValueAssociationChild T2 ' +
           'on T1.Id=T2.IdManyValueAssociation',
    From.GetSQL);

  From.Free;
end;

procedure TQueryBuilderTest.WhenTheClassHaveThePrimaryKeyAttributeMustBuildTheWhereWithTheValuesOfFieldInTheKeyList;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database, TClassWithPrimaryKeyAttribute.Create, 456);

  var MyClass := TClassWithPrimaryKeyAttribute.Create;
  MyClass.Id := 123;
  MyClass.Id2 := 456;
  MyClass.Value := 222;

  Query.Update(MyClass);

  Assert.AreEqual('update ClassWithPrimaryKeyAttribute set Id=123,Value=222 where Id2=456', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTheClassRecursivelyItselfMoreThenOneTimeMustBuildTheSQLAsEspected;
begin
  var From := TQueryBuilderFrom.Create(nil, 2);

  From.From<TClassRecursiveItSelf>;

  Assert.AreEqual(
        ' from ClassRecursiveItself T1 ' +
    'left join ClassRecursiveItself T2 ' +
           'on T1.IdRecursive1=T2.Id ' +
    'left join ClassRecursiveItself T3 ' +
           'on T2.IdRecursive1=T3.Id ' +
    'left join ClassRecursiveItself T4 ' +
           'on T2.IdRecursive2=T4.Id ' +
    'left join ClassRecursiveItself T5 ' +
           'on T1.IdRecursive2=T5.Id ' +
    'left join ClassRecursiveItself T6 ' +
           'on T5.IdRecursive1=T6.Id ' +
    'left join ClassRecursiveItself T7 ' +
           'on T5.IdRecursive2=T7.Id',
    From.GetSQL);

  From.Free;
end;

procedure TQueryBuilderTest.WhenTheJoinLinkIsFromAnInheritedClassMustMarkTheIsInheritedLinkHasTrue;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  From.From<TMyEntityInheritedFromSimpleClass>;

  Assert.IsTrue(From.Join.Links[0].IsInheritedLink);

  From.Free;
end;

procedure TQueryBuilderTest.WhenTryToSaveAnEntityWithThePrimaryKeyEmptyMustInsertTheEntity;
begin
  var Database := CreateDatabaseConnection;
  var Obj := TMyEntityWithPrimaryKey.Create;
  var Query := CreateQueryBuilder(Database);

  Query.Save(Obj);

  Assert.AreEqual('insert into MyEntityWithPrimaryKey(Value,Id)values(0,0)', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenTryToSaveAnEntityWithThePrimaryKeyFilledMustUpdateTheEntity;
begin
  var Database := CreateDatabaseConnection;
  var Obj := TMyEntityWithPrimaryKey.Create;
  Obj.Value := 12345;
  var ObjCache := TMyEntityWithPrimaryKey.Create;
  ObjCache.Value := 12345;
  ObjCache.Id := 123;
  var Query := CreateQueryBuilder(Database, ObjCache, 12345);

  Query.Save(Obj);

  Assert.AreEqual('update MyEntityWithPrimaryKey set Id=0 where Value=12345', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenUpdateAnEntityWithoutPrimaryKeyMustUpdateAllRecordFromTable;
begin
  var Database := CreateDatabaseConnection;
  var Obj := TMyTestClass.Create;
  var ObjCache := TMyTestClass.Create;
  ObjCache.Field := 1;
  ObjCache.Name := 'Name';
  ObjCache.Value := 2;
  var Query := CreateQueryBuilder(Database, ObjCache, '');

  Query.Save(Obj);

  Assert.AreEqual('update MyTestClass set Field=0,Name='''',Value=0', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenUpdatingAClassWithManyValueAssociationCantPutThisTypeOfFieldInTheUpdateList;
begin
  var Database := CreateDatabaseConnection;
  var MyClass := TMyEntityWithManyValueAssociation.Create;
  MyClass.Id := 12345;
  var Query := CreateQueryBuilder(Database, TMyEntityWithManyValueAssociation.Create, 12345);

  Query.Update(MyClass);

  Assert.IsEmpty(Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderTest.WhenUseTheOrderByClauseMustLoadTheSQLHasExpected;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  Query.Select.All.From<TMyTestClass>.OrderBy.Field('Field').Open;

  Assert.AreEqual('select T1.Field F1,T1.Name F2,T1.Value F3 from MyTestClass T1 order by T1.Field', Database.SQL);

  Query.Free;
end;

{ TDatabaseTest }

constructor TDatabaseTest.Create(const Cursor: IDatabaseCursor);
begin
  inherited Create;

  FCursor := Cursor;
end;

procedure TDatabaseTest.ExecuteDirect(const SQL: String);
begin
  SaveSQL(SQL);
end;

function TDatabaseTest.ExecuteInsert(const SQL: String; const OutputFields: TArray<String>): IDatabaseCursor;
begin
  FOutputFields := OutputFields;
  Result := OpenCursor(SQL);
end;

function TDatabaseTest.OpenCursor(const SQL: String): IDatabaseCursor;
begin
  Result := FCursor;

  SaveSQL(SQL);
end;

procedure TDatabaseTest.SaveSQL(const SQL: String);
begin
  if not FSQL.IsEmpty then
    FSQL := FSQL + #13#10;

  FSQL := FSQL + SQL;
end;

function TDatabaseTest.StartTransaction: IDatabaseTransaction;
begin
  Result := TMock.CreateInterface<IDatabaseTransaction>(True).Instance;
end;

{ TQueryBuilderAllFieldsTest }

procedure TQueryBuilderAllFieldsTest.FieldsOfAnObjectCantBeLoadedInTheListOfFields;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var FieldList := TQueryBuilderAllFields.Create(From);

  From.From<TClassWithTwoForeignKey>;

  for var Field in FieldList.GetFields do
    Assert.IsFalse(Field.Field.PropertyInfo.PropertyType.InheritsFrom(TRttiStructuredType));

  From.Free;

  FieldList.Free;
end;

procedure TQueryBuilderAllFieldsTest.InASingleClassMustLoadAllFieldsFromThatClass;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var FieldList := TQueryBuilderAllFields.Create(From);

  From.From<TMyTestClass>;

  Assert.AreEqual<Integer>(3, Length(FieldList.GetFields));

  From.Free;

  FieldList.Free;
end;

procedure TQueryBuilderAllFieldsTest.Setup;
begin
  TMapper.Default.LoadAll;
end;

procedure TQueryBuilderAllFieldsTest.TheFieldsMustBeLoadedRecursivelyInAllForeignKeys;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var FieldList := TQueryBuilderAllFields.Create(From);

  From.From<TClassWithForeignKeyRecursive>;

  Assert.AreEqual<Integer>(4, Length(FieldList.GetFields));

  From.Free;

  FieldList.Free;
end;

procedure TQueryBuilderAllFieldsTest.TheRecursivelyMustBeRespectedAndLoadAllFieldFromTheClasses;
begin
  var From := TQueryBuilderFrom.Create(nil, 3);

  var FieldList := TQueryBuilderAllFields.Create(From);

  From.From<TClassRecursiveFirst>;

  Assert.AreEqual<Integer>(10, Length(FieldList.GetFields));

  From.Free;

  FieldList.Free;
end;

procedure TQueryBuilderAllFieldsTest.WhenAFieldIsLazyLoadingThisMustLoadInFieldList;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var Fields := TQueryBuilderAllFields.Create(From);

  From.From<TLazyClass>;

  Assert.AreEqual<Integer>(2, Length(Fields.GetFields));

  From.Free;

  Fields.Free;
end;

procedure TQueryBuilderAllFieldsTest.WhenTheClassHaveForeignKeyMustLoadAllFieldsOfAllClassesInvolved;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var FieldList := TQueryBuilderAllFields.Create(From);

  From.From<TClassWithTwoForeignKey>;

  Assert.AreEqual<Integer>(5, Length(FieldList.GetFields));

  From.Free;

  FieldList.Free;
end;

procedure TQueryBuilderAllFieldsTest.WhenTheClassIsRecursiveItselfCantRaiseAnErrorInTheExecution;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var FieldList := TQueryBuilderAllFields.Create(From);

  From.From<TClassRecursiveFirst>;

  Assert.WillNotRaise(
    procedure
    begin
      FieldList.GetFields;
    end);

  From.Free;

  FieldList.Free;
end;

procedure TQueryBuilderAllFieldsTest.WhenThePropertyIsAnArrayCantLoadTheFieldInTheList;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  var FieldList := TQueryBuilderAllFields.Create(From);

  From.From<TMyEntityWithManyValueAssociation>;

  Assert.AreEqual<Integer>(2, Length(FieldList.GetFields));

  From.Free;

  FieldList.Free;
end;

{ TQueryBuilderSelectTest }

procedure TQueryBuilderSelectTest.Setup;
begin
  TMapper.Default.LoadAll;
end;

procedure TQueryBuilderSelectTest.WhenFillTheFirstRecordsMustBuildTheSQLAsExpectedForSQLServer;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  Query.Select.First(10).All.From<TClassWithForeignKey>.Open;

  Assert.AreEqual('select top 10 T1.Id F1,T2.Id F2,T2.Value F3 from ClassWithForeignKey T1 left join ClassWithPrimaryKey T2 on T1.IdAnotherClass=T2.Id', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderSelectTest.WhenFillTheFirstRecordsMustLoadThePropertyWithThePassedValue;
begin
  var Select := TQueryBuilderSelect.Create(nil);

  Assert.AreEqual(20, Select.First(20).FirstRecords);

  Select.Free;
end;

procedure TQueryBuilderSelectTest.WhenIsNotDefinedTheRecursivityLevelMustBeOneTheDefaultValue;
begin
  var Select := TQueryBuilderSelect.Create(nil);

  Assert.AreEqual(1, Select.RecursivityLevelValue);

  Select.Free;
end;

procedure TQueryBuilderSelectTest.WhenSelectingATableAsAParameterMustUseThisParameterAndNotTryingToFindTheGenericTable;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  Assert.WillNotRaise(
    procedure
    begin
      Query.Select.All.From<TObject>(TMapper.Default.FindTable(TClassWithForeignKey)).Open;
    end);

  Query.Free;
end;

procedure TQueryBuilderSelectTest.WhenTheClassHaveForeignKeyMustBuildTheSQLWithTheAliasOfTheJoinMapped;
begin
  var Database := TDatabaseTest.Create(nil);
  var Query := CreateQueryBuilder(Database);

  Query.Select.All.From<TClassWithForeignKey>.Open;

  Assert.AreEqual('select T1.Id F1,T2.Id F2,T2.Value F3 from ClassWithForeignKey T1 left join ClassWithPrimaryKey T2 on T1.IdAnotherClass=T2.Id', Database.SQL);

  Query.Free;
end;

{ TQueryBuilderComparisonTest }

procedure TQueryBuilderComparisonTest.Setup;
begin
  TMapper.Default.LoadAll;
end;

procedure TQueryBuilderComparisonTest.WhenCallTheFieldFuncitionMustLoadTheFieldNameInTheLeftOperator;
begin
  var Comparison := Field('MyField');

  Assert.AreEqual('MyField', Comparison.Comparison.Field.FieldNames[0]);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenCompareTheFieldWithAnIntegerValueMustLoadTheComparisonAsExpected(Operation: TQueryBuilderComparisonOperator);
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var Field := Field('MyField');
  var Value := 1234;

  case Operation of
    qbcoBetween: Comparison := Field.Between<Integer>(123, 456);
    qbcoEqual: Comparison := Field = Value;
    qbcoGreaterThan: Comparison := Field > Value;
    qbcoGreaterThanOrEqual: Comparison := Field >= Value;
    qbcoLessThan: Comparison := Field < Value;
    qbcoLessThanOrEqual: Comparison := Field <= Value;
    qbcoLike: Comparison := Field.Like('abc');
    qbcoNotEqual: Comparison := Field <> Value;
    qbcoNotNull: Comparison := Field <> NULL;
    qbcoNull: Comparison := Field = NULL;
    else raise Exception.Create('Not implemented');
  end;

  Assert.AreEqual('MyField', Comparison.Comparison.Left.Field.FieldNames[0]);
  Assert.AreEqual(Operation, Comparison.Comparison.Comparison);

  case Operation of
    qbcoNull,
    qbcoNotNull: Assert.AreEqual(TNullEnumerator.NULL, Comparison.Comparison.Right.Value.AsType<TNullEnumerator>);
    qbcoBetween:
    begin
      var Values := Comparison.Comparison.Right.Value.AsType<TArray<Integer>>;
      Assert.AreEqual(123, Values[0]);
      Assert.AreEqual(456, Values[1]);
    end;
    qbcoLike: Assert.AreEqual('abc', Comparison.Comparison.Right.Value.AsString);
    else Assert.AreEqual(Value, Comparison.Comparison.Right.Value.AsInteger);
  end;

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenCompareTheFieldWithAStringValueMustLoadTheComparisonAsExpected;
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var Value := 'abc';

  for var Operation := Low(TQueryBuilderComparisonOperator) to High(TQueryBuilderComparisonOperator) do
  begin
    Comparison := Field('MyField');

    case Operation of
      qbcoEqual: Comparison := Comparison = Value;
      qbcoGreaterThan: Comparison := Comparison > Value;
      qbcoGreaterThanOrEqual: Comparison := Comparison >= Value;
      qbcoLessThan: Comparison := Comparison < Value;
      qbcoLessThanOrEqual: Comparison := Comparison <= Value;
      qbcoNone, qbcoNull, qbcoNotNull, qbcoBetween, qbcoLike:
      begin
        Comparison.Comparison.Free;

        Continue;
      end;
      qbcoNotEqual: Comparison := Comparison <> Value;
      else raise Exception.Create('Not implemented');
    end;

    Assert.AreEqual('MyField', Comparison.Comparison.Left.Field.FieldNames[0]);
    Assert.AreEqual(Operation, Comparison.Comparison.Comparison);
    Assert.AreEqual(Value, Comparison.Comparison.Right.Value.AsString);

    Comparison.Comparison.Free;
  end;
end;

procedure TQueryBuilderComparisonTest.WhenToUseTheOperatorAndHaveToGenerateALogicalOperationWithFilledComparisons;
begin
  var Comparison := (Field('F1') = 'abc') and (Field('F2') = 'abc');

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenToUseTheOperatorAndHaveToGenerateALogicalOperationWithOperationAndFilled;
begin
  var Comparison := (Field('F1') = 'abc') and (Field('F2') = 'abc');

  Assert.AreEqual(qloAnd, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenToUseTheOperatorOrHaveToGenerateALogicalOperationWithFilledComparisons;
begin
  var Comparison := (Field('F1') = 'abc') or (Field('F2') = 'abc');

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenToUseTheOperatorOrHaveToGenerateALogicalOperationWithOperationOrFilled;
begin
  var Comparison := (Field('F1') = 'abc') or (Field('F2') = 'abc');

  Assert.AreEqual(qloOr, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenAndOperatorMustLoadTheOperationWithTheAndValue;
begin
  var Comparison := (Field('MyField') = 'abc') and (Field('MyField2') = 'abc');

  Assert.AreEqual(qloAnd, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenBothOperatorAreLogicalMustCreateANewLogicalOperationWithBothValuesInAndOperator;
begin
  var Comparison := ((Field('F1') = 1) and (Field('F2') = 2)) and ((Field('F3') = 3) and (Field('F4') = 4));

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Left.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual('F3', Comparison.Comparison.Right.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F4', Comparison.Comparison.Right.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloAnd, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenBothOperatorAreLogicalMustCreateANewLogicalOperationWithBothValuesInOrOperator;
begin
  var Comparison := ((Field('F1') = 1) or (Field('F2') = 2)) or ((Field('F3') = 3) or (Field('F4') = 4));

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Left.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual('F3', Comparison.Comparison.Right.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F4', Comparison.Comparison.Right.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloOr, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenForASimpleComparisonYouHaveToAssembleTheLogicalOperatorWithComparisonTypeValuesInOperationAnd;
begin
  var Comparison := (Field('F1') = 1) and (Field('F2') = 2);

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloAnd, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenForASimpleComparisonYouHaveToAssembleTheLogicalOperatorWithComparisonTypeValuesInOperationOr;
begin
  var Comparison := (Field('F1') = 1) or (Field('F2') = 2);

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloOr, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenOperationLeftIsAComparisonAndRightIsALogicalOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheValueOfComparisonAndRightWithTheLogicalOperationInTheAndOperation;
begin
  var Comparison := (Field('F1') = 1) and ((Field('F2') = 2) and (Field('F3') = 3));

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Right.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F3', Comparison.Comparison.Right.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloAnd, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenOperationLeftIsAComparisonAndRightIsALogicalOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheValueOfComparisonAndRightWithTheLogicalOperationInTheOrOperation;
begin
  var Comparison := (Field('F1') = 1) or ((Field('F2') = 2) or (Field('F3') = 3));

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Right.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F3', Comparison.Comparison.Right.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloOr, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenOperationLeftIsALogicalAndRightIsAComparisonOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheLogicalOperationAndRightWithTheValueOfComparisonInTheAndOperation;
begin
  var Comparison := ((Field('F1') = 1) and (Field('F2') = 2)) and (Field('F3') = 3);

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Left.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual('F3', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloAnd, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenOperationLeftIsALogicalAndRightIsAComparisonOperationHaveToAssembleANewLogicalOperatorWithTheLeftWithTheLogicalOperationAndRightWithTheValueOfComparisonInTheOrOperation;
begin
  var Comparison := ((Field('F1') = 1) or (Field('F2') = 2)) or (Field('F3') = 3);

  Assert.AreEqual('F1', Comparison.Comparison.Left.Left.Left.Field.FieldNames[0]);

  Assert.AreEqual('F2', Comparison.Comparison.Left.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual('F3', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Assert.AreEqual(qloOr, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenOrOperatorMustLoadTheOperationWithTheOrValue;
begin
  var Comparison := (Field('MyField') = 'abc') or (Field('MyField2') = 'abc');

  Assert.AreEqual(qloOr, Comparison.Comparison.Logical);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenTheAndOperatorIsCalledMustLoadTheLeftFieldWithTheLeftValueComparisonAndTheRightFieldWithTheRightValueComparision;
begin
  var Comparison := (Field('MyField') = 'abc') and (Field('MyField2') = 'abc');

  Assert.AreEqual('MyField', Comparison.Comparison.Left.Left.Field.FieldNames[0]);
  Assert.AreEqual('MyField2', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Comparison.Comparison.Free;
end;

procedure TQueryBuilderComparisonTest.WhenTheOrOperatorIsCalledMustLoadTheLeftFieldWithTheLeftValueComparisonAndTheRightFieldWithTheRightValueComparision;
begin
  var Comparison := (Field('MyField') = 'abc') or (Field('MyField2') = 'abc');

  Assert.AreEqual('MyField', Comparison.Comparison.Left.Left.Field.FieldNames[0]);
  Assert.AreEqual('MyField2', Comparison.Comparison.Right.Left.Field.FieldNames[0]);

  Comparison.Comparison.Free;
end;

{ TQueryBuilderWhereTest }

procedure TQueryBuilderWhereTest.AComposeLogicalOperationMustBeGeneratedAsExpected;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>.Where((Field('Field1') = 1) and (Field('Field2') = 2) or (Field('Field3') = 3));

  Assert.AreEqual(' where ((T1.Field1=1 and T1.Field2=2) or T1.Field3=3)', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.ASimpleLogicalAndOperationMustBeGeneratedAsExpected;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>.Where((Field('Field1') = 1111) and (Field('Field2') = 222));

  Assert.AreEqual(' where (T1.Field1=1111 and T1.Field2=222)', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.ASimpleLogicalOrOperationMustBeGeneratedAsExpected;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>.Where((Field('Field1') = 1111) or (Field('Field2') = 222));

  Assert.AreEqual(' where (T1.Field1=1111 or T1.Field2=222)', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.IfTheWhereDontFoundTheFieldMustRaiseAnError;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>;

  Assert.WillRaise(
    procedure
    begin
      Where.Where(Field('DontExists') = 1234);
    end, EFieldNotFoundInTable);

  From.Free;
end;

procedure TQueryBuilderWhereTest.Setup;
begin
  TMapper.Default.LoadAll;
end;

procedure TQueryBuilderWhereTest.TheComparisonOfTheValuesMustOccurAsExpected(TypeToConvert, ValueToCompare: String);
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Value: TValue;
  var Prefix := EmptyStr;

  if TypeToConvert = 'AnsiChar' then
    Value := TValue.From(AnsiChar('C'))
  else if TypeToConvert = 'AnsiString' then
    Value := TValue.From(AnsiString('AnsiString'))
  else if TypeToConvert = 'Char' then
    Value := TValue.From(Char('C'))
  else if TypeToConvert = 'Class' then
  begin
    var Obj := TMyEntityWithPrimaryKey.Create;
    Obj.Value := 1234;
    Prefix := 'Id';
    Value := Obj;
  end
  else if TypeToConvert = 'EmptyClass' then
  begin
    Prefix := 'Id';
    Value := TValue.From<TObject>(nil);
  end
  else if TypeToConvert = 'Enumerator' then
    Value := TValue.From(Enum2)
  else if TypeToConvert = 'Float' then
    Value := 1234.456
  else if TypeToConvert = 'Date' then
    Value := TValue.From(EncodeDate(2020, 1, 31))
  else if TypeToConvert = 'DateTime' then
    Value := TValue.From(EncodeDateTime(2020, 1, 31, 12, 34, 56, 0))
  else if TypeToConvert = 'GUID' then
    Value := TValue.From(StringToGUID('{BD2BBA84-C691-4C5E-ABD3-4F32937C53F8}'))
  else if TypeToConvert = 'Integer' then
    Value := 1234
  else if TypeToConvert = 'Int64' then
    Value := Int64(1234)
  else if TypeToConvert = 'String' then
    Value := 'String'
  else if TypeToConvert = 'Time' then
    Value := TValue.From(TTime(EncodeTime(12, 34, 56, 0)))
  else
    raise Exception.Create('Test not mapped!');

  var Where := From.From<TMyEntityWithAllTypeOfFields>.Where(Field(TypeToConvert) = Value);

  Assert.AreEqual(Format(' where T1.%s%s=%s', [Prefix, TypeToConvert, ValueToCompare]), Where.GetSQL);

  if Value.IsObject then
    Value.AsObject.Free;

  From.Free;
end;

procedure TQueryBuilderWhereTest.TheComparisonOperatorsMustBeGeneratedAsExpected(Operation: TQueryBuilderComparisonOperator);
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var Field := Field('MyField');
  var ValueString := String('1');

  case Operation of
    qbcoBetween:
    begin
      Comparison := Field.Between<Integer>(123, 456);
      ValueString := ' between 123 and 456';
    end;
    qbcoEqual: Comparison := Field = 1;
    qbcoGreaterThan: Comparison := Field > 1;
    qbcoGreaterThanOrEqual: Comparison := Field >= 1;
    qbcoLessThan: Comparison := Field < 1;
    qbcoLessThanOrEqual: Comparison := Field <= 1;
    qbcoLike:
    begin
      Comparison := Field.Like('%like operator%');
      ValueString := ' like ''%like operator%''';
    end;
    qbcoNone:
    begin
      Field.Comparison.Free;

      Assert.IsTrue(True);
    end;
    qbcoNotEqual: Comparison := Field <> 1;
    qbcoNotNull:
    begin
      Comparison := Field <> NULL;
      ValueString := ' is not null';
    end;
    qbcoNull:
    begin
      Comparison := Field = NULL;
      ValueString := ' is null';
    end;
    else raise Exception.Create('Test not implemented');
  end;

  if Operation <> qbcoNone then
  begin
    var From := TQueryBuilderFrom.Create(nil, 1);

    Assert.AreEqual(Format(' where T1.MyField%s%s', [COMPARISON_OPERATOR[Operation], ValueString]), From.From<TWhereClassTest>.Where(Comparison).GetSQL);

    From.Free;
  end;
end;

procedure TQueryBuilderWhereTest.TheLasNameInTheComposeNameMustBeTheFieldToBeFoundInAClass;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>.Where(Field('Where') = 1);

  Assert.AreEqual(' where T1.IdWhere=1', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenAPropertyIsLazyLoadingCantAppearInTheFromClause;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);

  From.From<TLazyClass>;

  Assert.AreEqual(' from LazyClass T1', From.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenBothOperationsAreLogicalHaveToGenerateSQLAsExpected;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>.Where((Field('Field1') = 1) and (Field('Field2') = 2) or (Field('Field3') = 3) and (Field('Field4') = 4));

  Assert.AreEqual(' where ((T1.Field1=1 and T1.Field2=2) or (T1.Field3=3 and T1.Field4=4))', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenBuildingTheFilterMustCheckTheFieldsJoinsIfExistsAndRaiseAnErrorIfNotFind;
begin
  var From := TQueryBuilderFrom.Create(nil, 5);

  Assert.WillRaiseWithMessage(
    procedure
    begin
      From.From<TMyTestClass>.Where(Field('NotExitst.Field') = 'abc');
    end, EFieldNotFoundInTable, 'Field "NotExitst" not found in current table!');

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenCompareAFieldWithAnValueMustBuildTheFilterAsExpected;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>.Where(Field('Value') = 1234);

  Assert.AreEqual(' where T1.Value=1234', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenComparingEnumeratorTheComparisonMustHappenAsExpected(Operation: TQueryBuilderComparisonOperator);
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var Field := Field('Enumerator');

  case Operation of
    qbcoEqual: Comparison := Field = Enum2;
    qbcoGreaterThan: Comparison := Field > Enum2;
    qbcoGreaterThanOrEqual: Comparison := Field >= Enum2;
    qbcoLessThan: Comparison := Field < Enum2;
    qbcoLessThanOrEqual: Comparison := Field <= Enum2;
    qbcoNotEqual: Comparison := Field <> Enum2;
    qbcoNone, qbcoNull, qbcoNotNull, qbcoBetween:
    begin
      Field.Comparison.Free;

      Assert.IsTrue(True);

      Exit;
    end;
    else raise Exception.Create('Test not implemented');
  end;

  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TMyEntityWithAllTypeOfFields>.Where(Comparison);

  Assert.AreEqual(Format(' where T1.Enumerator%s1', [COMPARISON_OPERATOR[Operation]]), Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenComparingFieldMustBuildTheFilterAsExpected(Operation: TQueryBuilderComparisonOperator);
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var FieldLeft := Field('MyField');
  var FieldValue := Field('Value');

  case Operation of
    qbcoEqual: Comparison := FieldLeft = FieldValue;
    qbcoGreaterThan: Comparison := FieldLeft > FieldValue;
    qbcoGreaterThanOrEqual: Comparison := FieldLeft >= FieldValue;
    qbcoLessThan: Comparison := FieldLeft < FieldValue;
    qbcoLessThanOrEqual: Comparison := FieldLeft <= FieldValue;
    qbcoNotEqual: Comparison := FieldLeft <> FieldValue;
    qbcoNone, qbcoNull, qbcoNotNull, qbcoBetween:
    begin
      FieldLeft.Comparison.Free;
      FieldValue.Comparison.Free;

      Assert.IsTrue(True);

      Exit;
    end;
    else raise Exception.Create('Test not implemented');
  end;

  var From := TQueryBuilderFrom.Create(nil, 1);

  Assert.AreEqual(Format(' where T1.MyField%sT1.Value', [COMPARISON_OPERATOR[Operation]]), From.From<TWhereClassTest>.Where(Comparison).GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenExistsAJoinLoadedMustPutTheAliasOfTheTableBeforeTheFieldName;
begin
  var From := TQueryBuilderFrom.Create(nil, 2);
  var Where := From.From<TWhereClassTest>.Where(Field('Field1') = 1);

  Assert.AreEqual(' where T1.Field1=1', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenLeftOperationIsASimpleComparisonAndRightIsALogicalOperationItHasToGenerateSQLAsExpected;
begin
  var From := TQueryBuilderFrom.Create(nil, 1);
  var Where := From.From<TWhereClassTest>.Where((Field('Field1') = 1) and ((Field('Field2') = 2) or (Field('Field3') = 3)));

  Assert.AreEqual(' where (T1.Field1=1 and (T1.Field2=2 or T1.Field3=3))', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenTheClassIsInheritedMustFindTheFieldInTheBaseClass;
begin
  var From := TQueryBuilderFrom.Create(nil, 5);
  var Where := From.From<TMyEntityInheritedFromSimpleClass>.Where(Field('BaseProperty') = 'abc');

  Assert.AreEqual(' where T2.BaseProperty=''abc''', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenTheClassIsRecursiveInItselfHasToPutTheRightAlias;
begin
  var From := TQueryBuilderFrom.Create(nil, 5);
  var Where := From.From<TClassRecursiveItSelf>.Where(Field('Recursive1.Recursive1.Recursive1.Recursive1.Recursive1') = 1);

  Assert.AreEqual(' where T5.IdRecursive1=1', Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenTheComparisionWithADateMustCreateTheComparisionAsExpected(Operation: TQueryBuilderComparisonOperator);
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var Field := Field('Date');
  var From := TQueryBuilderFrom.Create(nil, 1);
  var DateVar: TDate := EncodeDate(2021, 01, 01);

  case Operation of
    qbcoEqual: Comparison := Field = DateVar;
    qbcoGreaterThan: Comparison := Field > DateVar;
    qbcoGreaterThanOrEqual: Comparison := Field >= DateVar;
    qbcoLessThan: Comparison := Field < DateVar;
    qbcoLessThanOrEqual: Comparison := Field <= DateVar;
    qbcoNotEqual: Comparison := Field <> DateVar;
    else raise Exception.Create('Test not implemented');
  end;

  var Where := From.From<TMyEntityWithAllTypeOfFields>.Where(Comparison);

  Assert.AreEqual(Format(' where T1.Date%s''2021-01-01''', [COMPARISON_OPERATOR[Operation]]), Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenTheComparisionWithADateTimeMustCreateTheComparisionAsExpected(Operation: TQueryBuilderComparisonOperator);
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var Field := Field('DateTime');
  var From := TQueryBuilderFrom.Create(nil, 1);
  var DateVar: TDateTime := EncodeDateTime(2021, 01, 01, 12, 34, 56, 0);

  case Operation of
    qbcoEqual: Comparison := Field = DateVar;
    qbcoGreaterThan: Comparison := Field > DateVar;
    qbcoGreaterThanOrEqual: Comparison := Field >= DateVar;
    qbcoLessThan: Comparison := Field < DateVar;
    qbcoLessThanOrEqual: Comparison := Field <= DateVar;
    qbcoNotEqual: Comparison := Field <> DateVar;
    else raise Exception.Create('Test not implemented');
  end;

  var Where := From.From<TMyEntityWithAllTypeOfFields>.Where(Comparison);

  Assert.AreEqual(Format(' where T1.DateTime%s''2021-01-01 12:34:56''', [COMPARISON_OPERATOR[Operation]]), Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenTheComparisionWithATimeMustCreateTheComparisionAsExpected(Operation: TQueryBuilderComparisonOperator);
begin
  var Comparison: TQueryBuilderComparisonHelper;
  var Field := Field('Time');
  var From := TQueryBuilderFrom.Create(nil, 1);
  var DateVar: TTime := EncodeTime(12, 34, 56, 0);

  case Operation of
    qbcoEqual: Comparison := Field = DateVar;
    qbcoGreaterThan: Comparison := Field > DateVar;
    qbcoGreaterThanOrEqual: Comparison := Field >= DateVar;
    qbcoLessThan: Comparison := Field < DateVar;
    qbcoLessThanOrEqual: Comparison := Field <= DateVar;
    qbcoNotEqual: Comparison := Field <> DateVar;
    else raise Exception.Create('Test not implemented');
  end;

  var Where := From.From<TMyEntityWithAllTypeOfFields>.Where(Comparison);

  Assert.AreEqual(Format(' where T1.Time%s''12:34:56''', [COMPARISON_OPERATOR[Operation]]), Where.GetSQL);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenTheWhereFilterUsesAFieldFromABaseClassCantRaiseAnyError;
begin
  var From := TQueryBuilderFrom.Create(nil, 5);

  Assert.WillNotRaise(
    procedure
    begin
      From.From<TMyClassWithForeignKeyInherited>.Where(Field('MyField.AnotherValues.Id') = 'abc');
    end);

  From.Free;
end;

procedure TQueryBuilderWhereTest.WhenUsingAComposeNameMustPutTheAliasOfTheTableBeforeTheFieldName;
begin
  var From := TQueryBuilderFrom.Create(nil, 2);
  var Where := From.From<TWhereClassTest>.Where(Field('Where.Class1.Class3.Id') = 1);

  Assert.AreEqual(' where T4.Id=1', Where.GetSQL);

  From.Free;
end;

{ TQueryBuilderDataManipulationTest }

procedure TQueryBuilderDataManipulationTest.AfterInsertTheObjectInDatabaseMustAddAStateObjectToTheCache;
begin
  var Cache := TCache.Create as ICache;
  var CachedObject: ISharedObject := nil;
  var MyClass := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClass.Id := 123;
  MyClass.Field3 := 'abc';
  var Query := CreateQueryBuilder(CreateDatabaseConnection, Cache);

  Query.Insert(MyClass);

  Cache.Get('Delphi.ORM.Test.Entity.TMyEntityWithPrimaryKeyInLastField.123', CachedObject);

  Assert.IsTrue(Supports(CachedObject, IStateObject));

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.AfterUpdateAnObjectTheForeignObjectMustBeDestroyed;
begin
  var MyClass := TMock.CreateClass<TMyEntityWithPrimaryKeyInLastField>(nil, True);
  MyClass.Instance.Id := 123;
  var MyClassCache := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClassCache.Id := 123;
  var Query := CreateQueryBuilder(MyClassCache, 123);

  MyClass.Expect.Once.When.BeforeDestruction;

  Query.Update(MyClass.Instance);

  Assert.CheckExpectation(MyClass.CheckExpectations);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.AfterUpdateTheManyValueAssociationMustUpdateTheReferenceOfTheObjectInTheChildList;
begin
  var Cache := TCache.Create as ICache;
  var MyChild := TManyValueChild.Create;
  MyChild.Id := 123;
  var MyClass := TManyValueParent.Create;
  MyClass.Id := 123;
  MyClass.Childs := [MyChild];
  var MyClassCache := TManyValueParent.Create;
  var MyChildCache := TManyValueChild.Create;
  var Query := CreateQueryBuilder(CreateDatabaseConnection, Cache);

  AddObjectToCache(Cache, MyClassCache, 123);

  AddObjectToCache(Cache, MyChildCache, 123);

  Query.Update(MyClass);

  Assert.AreEqual<Pointer>(MyChildCache, MyClassCache.Childs[0]);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.ReadOnlyFieldsCantBeUpdatedInUpdateFunction;
begin
  var MyClass := TMyEntityInheritedFromSimpleClass.Create;
  var Query := CreateQueryBuilder(TMyEntityInheritedFromSimpleClass.Create, 0);

  Assert.WillNotRaise(
    procedure
    begin
      Query.Update(MyClass);
    end);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.SetupFixture;
begin
  TMapper.Default.LoadAll;

  TMock.CreateInterface<IDatabaseConnection>;

  TMock.CreateInterface<IDatabaseCursor>;

  TMock.CreateInterface<IDatabaseTransaction>;

  TMock.CreateClass<TMyEntityWithPrimaryKeyInLastField>(nil, True).Free;
end;

procedure TQueryBuilderDataManipulationTest.TheDeleteErrorMustRaiseAfterTheRollbackTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteDirect(It.IsAny<String>);

  Assert.WillRaise(
    procedure
    begin
      Query.Delete(MyClass);
    end);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.TheInsertionErrorMustBeRaiseAfterTheRollbackTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := TQueryBuilder.Create(Database.Instance, nil);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Rollback;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  Assert.WillRaise(
    procedure
    begin
      Query.Insert(MyClass);
    end);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.TheSaveErrorMustRaiseAfterTheRollbackTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Id := 123;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteDirect(It.IsAny<String>);

  Assert.WillRaise(
    procedure
    begin
      Query.Save(MyClass);
    end);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.TheStateObjectMustCopyTheValueOfAllPropertiesFromTheOriginalObject;
begin
  var Cache := TCache.Create as ICache;
  var CachedObject: ISharedObject := nil;
  var MyClass := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClass.Id := 123;
  MyClass.Field3 := 'abc';
  var Query := CreateQueryBuilder(CreateDatabaseConnection, Cache);

  Query.Insert(MyClass);

  Cache.Get('Delphi.ORM.Test.Entity.TMyEntityWithPrimaryKeyInLastField.123', CachedObject);

  var OldObject := (CachedObject as IStateObject).OldObject as TMyEntityWithPrimaryKeyInLastField;

  Assert.AreEqual(123, OldObject.Id);

  Assert.AreEqual('abc', OldObject.Field3);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.TheUpdateErrorMustRaiseAfterTheRollbackTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteDirect(It.IsAny<String>);

  Assert.WillRaise(
    procedure
    begin
      Query.Update(MyClass);
    end);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.TheValuesFromTheForeignObjectMustBeLoadedInTheCachedObject;
begin
  var MyClass := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClass.Id := 123;
  MyClass.Field3 := 'abc';
  var MyClassCache := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClassCache.Id := 123;
  MyClassCache.Field3 := '888';
  var Query := CreateQueryBuilder(MyClassCache, 123);

  Query.Update(MyClass);

  Assert.AreEqual('abc', MyClassCache.Field3);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenAnDeleteErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Rollback;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteDirect(It.IsAny<String>);

  try
    Query.Delete(MyClass);
  except
  end;

  Assert.CheckExpectation(Transaction.CheckExpectations);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenAnInsertErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Rollback;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  try
    Query.Insert(MyClass);
  except
  end;

  Assert.CheckExpectation(Transaction.CheckExpectations);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenAnSaveErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Id := 123;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Rollback;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteDirect(It.IsAny<String>);

  try
    Query.Save(MyClass);
  except
  end;

  Assert.CheckExpectation(Transaction.CheckExpectations);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenAnUpdateErrorOccurrsMustCallRollbackFunctionOfTheTransaction;
begin
  var Cursor := TMock.CreateInterface<IDatabaseCursor>(True);
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Rollback;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillExecute(
    procedure
    begin
      raise Exception.Create('An error message');
    end).When.ExecuteDirect(It.IsAny<String>);

  try
    Query.Update(MyClass);
  except
  end;

  Assert.CheckExpectation(Transaction.CheckExpectations);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenCallDeleteMustStartATransactionInDatabase;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;

  Database.Expect.Once.When.StartTransaction;

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Query.Delete(MyClass);

  Assert.CheckExpectation(Database.CheckExpectations);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenCallInsertMustStartATransactionInDatabase;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;

  Database.Expect.Once.When.StartTransaction;

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance)).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  Query.Insert(MyClass);

  Assert.CheckExpectation(Database.CheckExpectations);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenCallSaveMustStartATransactionInDatabase;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Id := 123;
  var Query := CreateQueryBuilder(Database.Instance, TAutoGeneratedClass.Create, 123);

  Database.Expect.Once.When.StartTransaction;

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Query.Save(MyClass);

  Assert.CheckExpectation(Database.CheckExpectations);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenCallUpdateMustStartATransactionInDatabase;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var MyClass := TAutoGeneratedClass.Create;
  var Query := CreateQueryBuilder(Database.Instance, TAutoGeneratedClass.Create, '0');

  Database.Expect.Once.When.StartTransaction;

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Query.Update(MyClass);

  Assert.CheckExpectation(Database.CheckExpectations);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenInsertAnEntityMustSaveTheForeignKeysFirstAfterThisMustInsertTheEntity;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var ForeignKeySaved := False;
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TClassWithForeignKey.Create;
  MyClass.AnotherClass := TClassWithPrimaryKey.Create;

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      ForeignKeySaved := True;
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);
    end).When.ExecuteInsert(It(0).IsEqualTo('insert into ClassWithPrimaryKey(Id,Value)values(0,0)'), It(1).IsAny<TArray<String>>);

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);

      Assert.IsTrue(ForeignKeySaved, 'The foreign key not saved');
    end).When.ExecuteInsert(It(0).IsEqualTo('insert into ClassWithForeignKey(Id,IdAnotherClass)values(0,0)'), It(1).IsAny<TArray<String>>);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Query.Insert(MyClass);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenInsertAnEntityMustSaveTheManyValueAssociationsAfterInsertedTheEntity;
begin
  var CanSaveManyValueAssociation := False;
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TManyValueParent.Create;
  MyClass.Childs := [TManyValueChild.Create];

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      CanSaveManyValueAssociation := True;
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);
    end).When.ExecuteInsert(It(0).IsEqualTo('insert into ManyValueParent(Id,IdChild)values(0,null)'), It(1).IsAny<TArray<String>>);

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);

      Assert.IsTrue(CanSaveManyValueAssociation, 'The parent entity not saved');
    end).When.ExecuteInsert(It(0).IsEqualTo('insert into ManyValueChild(Id,IdParent)values(0,0)'), It(1).IsAny<TArray<String>>);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Query.Insert(MyClass);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenInsertANewObjectThisObjectMustBeAddedToTheCache;
begin
  var Cache := TCache.Create as ICache;
  var CachedObject: ISharedObject := nil;
  var MyClass := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClass.Id := 123;
  MyClass.Field3 := 'abc';
  var Query := CreateQueryBuilder(CreateDatabaseConnection, Cache);

  Query.Insert(MyClass);

  Cache.Get('Delphi.ORM.Test.Entity.TMyEntityWithPrimaryKeyInLastField.123', CachedObject);

  Assert.AreSame(MyClass, CachedObject.&Object);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenInsertAnObjectMustReturnTheObjectFromTheCache;
begin
  var MyClass := TMyEntityWithPrimaryKey.Create;
  var Query := CreateQueryBuilder(CreateDatabaseConnection);

  Assert.AreEqual<Pointer>(MyClass, Query.Insert(MyClass));

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenInsertingAClassMustInsertOnlyTheForeignKeyWithInsertCascadeAttribute;
begin
  var Database := TDatabaseTest.Create(TCursorMock.Create([[1], [2]]));
  var MyClass := TClassWithCascadeAttribute.Create;
  MyClass.InsertCascade := TClassWithCascadeForeignClass.Create;
  MyClass.UpdateCascade := TClassWithCascadeForeignClass.Create;
  MyClass.UpdateInsertCascade := TClassWithCascadeForeignClass.Create;
  var Query := CreateQueryBuilder(Database);

  Query.Insert(MyClass);

  Assert.AreEqual(
    'insert into ClassWithCascadeForeignClass(Value)values(0)'#13#10 +
    'insert into ClassWithCascadeForeignClass(Value)values(0)'#13#10 +
    'insert into ClassWithCascadeAttribute(Id,IdInsertCascade,IdUpdateCascade,IdUpdateInsertCascade)values(0,1,0,2)', Database.SQL);

  MyClass.UpdateCascade.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenInsertingAInheritedClassCantRaiseErrorFromDuplicateCacheValue;
begin
  var MyClass := TMyEntityInheritedFromSimpleClass.Create;
  var Query := CreateQueryBuilder(TDatabaseTest.Create(TCursorMock.Create([[123]])));

  Assert.WillNotRaise(
    procedure
    begin
      Query.Insert(MyClass);
    end);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenInsertingAnEntityInheritedFromAnotherMustInsertTheParentClassFirst;
begin
  var Database := TDatabaseTest.Create(TCursorMock.Create([[123]]));
  var MyClass := TMyEntityInheritedFromSimpleClass.Create;
  var Query := CreateQueryBuilder(Database);

  Query.Insert(MyClass);

  Assert.AreEqual(
    'insert into MyEntityInheritedFromSingle(AnotherProperty,BaseProperty)values('''','''')'#13#10 +
    'insert into MyEntityInheritedFromSimpleClass(Id,SimpleProperty)values(123,0)', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenNoFieldIsUpdatedCantRunAnySQL;
begin
  var Connection := CreateDatabaseConnection;
  var MyClass := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClass.Id := 123;
  var MyClassCache := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClassCache.Id := 123;
  var Query := CreateQueryBuilder(Connection, MyClassCache, 123);

  Query.Update(MyClass);

  Assert.IsEmpty(Connection.SQL);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenSaveAManyValueAssocitationEntityMustAvoidSaveTheParentLinkOfTheChildToAvoidStackOverflow;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TManyValueParentError.Create;
  MyClass.PassCount := 2;
  MyClass.Values := [TManyValueParentChildError.Create];

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance)).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Assert.WillNotRaise(
    procedure
    begin
      Query.Insert(MyClass);
    end);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenSaveAManyValueAssocitationEntityMustLoadTheParentObjectInTheChildObjects;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TManyValueParentError.Create;
  MyClass.PassCount := 3;
  MyClass.Values := [TManyValueParentChildError.Create];

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance)).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  try
    Query.Insert(MyClass);
  except
  end;

  Assert.IsNotNull(MyClass.Values[0].ManyValueParentError);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenSaveAnObjectMustReturnTheObjectFromTheCache;
begin
  var MyClass := TMyEntityWithPrimaryKey.Create;
  var Query := CreateQueryBuilder(CreateDatabaseConnection);

  Assert.AreEqual<Pointer>(MyClass, Query.Save(MyClass));

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenSavingAnEntityInheritedFromAnotherTableCantRaiseAnyError;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var MyClass := TMyEntityInheritedFromSimpleClass.Create;
  MyClass.Id := 123;
  var Query := CreateQueryBuilder(Database.Instance, TMyEntityInheritedFromSimpleClass.Create, 123);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance)).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Assert.WillNotRaise(
    procedure
    begin
      Query.Save(MyClass);
    end);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenTheDeleteOccursSuccessfullyMustCommitTheTransaction;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Commit;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Query.Delete(MyClass);

  Assert.CheckExpectation(Transaction.CheckExpectations);

  MyClass.Free;

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenTheInsertOccursSuccessfullyMustCommitTheTransaction;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var Query := CreateQueryBuilder(Database.Instance);
  var MyClass := TAutoGeneratedClass.Create;
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Commit;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance)).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  Query.Insert(MyClass);

  Assert.CheckExpectation(Transaction.CheckExpectations);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenThenObjectOfAForeignKeyIsNilCantRaiseAnyError;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var MyClass := TClassWithForeignKey.Create;
  var Query := CreateQueryBuilder(Database.Instance, TClassWithForeignKey.Create, 0);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance)).When.ExecuteInsert(It(0).IsAny<String>, It(1).IsAny<TArray<String>>);

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Assert.WillNotRaise(
  procedure
  begin
    Query.Update(MyClass);
  end);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenTheSaveOccursSuccessfullyMustCommitTheTransaction;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var MyClass := TAutoGeneratedClass.Create;
  MyClass.Id := 123;
  var Query := CreateQueryBuilder(Database.Instance, TAutoGeneratedClass.Create, 123);
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Commit;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Query.Save(MyClass);

  Assert.CheckExpectation(Transaction.CheckExpectations);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenTheUpdateOccursSuccessfullyMustCommitTheTransaction;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var MyClass := TAutoGeneratedClass.Create;
  var Query := CreateQueryBuilder(Database.Instance, TAutoGeneratedClass.Create, '0');
  var Transaction := TMock.CreateInterface<IDatabaseTransaction>(True);

  Transaction.Expect.Once.When.Commit;

  Database.Setup.WillReturn(TValue.From(Transaction.Instance)).When.StartTransaction;

  Query.Update(MyClass);

  Assert.CheckExpectation(Transaction.CheckExpectations);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenTryToUpdateAClassThatIsNotCachedHaveToRaiseAnError;
begin
  var MyClass := TClassWithPrimaryKey.Create;
  var Query := CreateQueryBuilder;

  Assert.WillRaise(
    procedure
    begin
      Query.Update(MyClass);
    end, EObjectReferenceWasNotFound);

  Query.Free;

  MyClass.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAClassMustUpdateOnlyTheChangedFields;
begin
  var Connection := CreateDatabaseConnection;
  var MyClass := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClass.Id := 123;
  MyClass.Field1 := 555;
  MyClass.Field2 := 777;
  MyClass.Field3 := '888';
  var MyClassCache := TMyEntityWithPrimaryKeyInLastField.Create;
  MyClassCache.Id := 123;
  MyClassCache.Field3 := '888';
  var Query := CreateQueryBuilder(Connection, MyClassCache, 123);

  Query.Update(MyClass);

  Assert.AreEqual('update MyEntityWithPrimaryKeyInLastField set Field1=555,Field2=777 where Id=123', Connection.SQL);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAClassWithManyValueAssociationMustUpdateTheListOfTheObjectInTheCache;
begin
  var MyClass := TManyValueParent.Create;
  MyClass.Childs := [TManyValueChild.Create];
  var MyClassCache := TManyValueParent.Create;
  var Query := CreateQueryBuilder(MyClassCache, 0);

  Query.Update(MyClass);

  Assert.AreEqual<Integer>(1, Length(MyClassCache.Childs));

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAnEntityAndForeignKeyIsInTheCaheMustUpdateTheReferenceWithThisObject;
begin
  var Cache := TCache.Create as ICache;
  var ForeignKey := TClassWithCascadeForeignClass.Create;
  var MyClass := TClassWithCascadeAttribute.Create;
  MyClass.Id := 1;
  MyClass.UpdateCascade := TClassWithCascadeForeignClass.Create;
  MyClass.UpdateCascade.Id := 1;
  var Query := CreateQueryBuilder(CreateDatabaseConnection, Cache);

  AddObjectToCache(Cache, ForeignKey, 1);

  AddObjectToCache(Cache, MyClass, 1);

  Query.Update(MyClass);

  Assert.AreEqual<Pointer>(ForeignKey, MyClass.UpdateCascade);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAnEntityMustSaveTheForeignKeysFirstAfterThisMustUpdateTheEntity;
begin
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var ForeignKeySaved := False;
  var MyClass := TClassWithForeignKey.Create;
  MyClass.AnotherClass := TClassWithPrimaryKey.Create;
  var Query := CreateQueryBuilder(Database.Instance, TClassWithForeignKey.Create, 0);

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      ForeignKeySaved := True;
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);
    end).When.ExecuteInsert(It(0).IsEqualTo('insert into ClassWithPrimaryKey(Id,Value)values(0,0)'), It(1).IsAny<TArray<String>>);

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);

      Assert.IsTrue(ForeignKeySaved, 'The foreign key not saved');
    end).When.ExecuteDirect(It(0).IsEqualTo('update ClassWithForeignKey set IdAnotherClass=0 where Id=0'));

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Query.Update(MyClass);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAnEntityMustSaveTheManyValueAssociationsAfterUpdatedTheEntity;
begin
  var CanSaveManyValueAssociation := False;
  var Database := TMock.CreateInterface<IDatabaseConnection>(True);
  var MyClass := TManyValueParent.Create;
  MyClass.Childs := [TManyValueChild.Create];
  var MyClassCache := TManyValueParent.Create;
  MyClassCache.Child := MyClass.Childs[0];
  var Query := CreateQueryBuilder(Database.Instance, MyClassCache, 0);

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);

      Assert.IsTrue(CanSaveManyValueAssociation, 'The parent entity not saved');
    end).When.ExecuteInsert(It(0).IsEqualTo('insert into ManyValueChild(Id,IdParent)values(0,0)'), It(1).IsAny<TArray<String>>);

  Database.Setup.WillExecute(
    function (const Args: TArray<TValue>): TValue
    begin
      CanSaveManyValueAssociation := True;
      Result := TValue.From(TMock.CreateInterface<IDatabaseCursor>(True).Instance);
    end).When.ExecuteDirect(It(0).IsEqualTo('update ManyValueParent set IdChild=null where Id=0'));

  Database.Setup.WillReturn(TValue.From(TMock.CreateInterface<IDatabaseTransaction>(True).Instance)).When.StartTransaction;

  Query.Update(MyClass);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAnEntityWithAnForeignKeyInTheCacheCantRaiseAnyError;
begin
  var Cache := TCache.Create as ICache;
  var ForeignKey := TClassWithCascadeForeignClass.Create;
  var MyClass := TClassWithCascadeAttribute.Create;
  MyClass.Id := 1;
  MyClass.UpdateCascade := TClassWithCascadeForeignClass.Create;
  MyClass.UpdateCascade.Id := 1;
  var Query := CreateQueryBuilder(CreateDatabaseConnection, Cache);

  AddObjectToCache(Cache, ForeignKey, 1);

  AddObjectToCache(Cache, MyClass, 1);

  Assert.WillNotRaise(
    procedure
    begin
      Query.Update(MyClass);
    end);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAnInheritedClassCantRaiseAccessViolationInTheDestructionProcess;
begin
  var MyClass := TMyEntityInheritedFromSimpleClass.Create;
  MyClass.Id := 123;
  var Query := CreateQueryBuilder(TMyEntityInheritedFromSimpleClass.Create, 123);

  Assert.WillNotRaise(
    procedure
    begin
      Query.Save(MyClass);
    end);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAnObjectMustReturnTheObjectFromTheCache;
begin
  var MyClass := TMyEntityWithPrimaryKey.Create;
  var MyCacheClass := TMyEntityWithPrimaryKey.Create;
  var Query := CreateQueryBuilder(MyCacheClass, '0');

  Assert.AreEqual<Pointer>(MyCacheClass, Query.Update(MyClass));

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdateAnObjectWithManyValueAssociationTheParentForeignKeyOfTheChildObjectMustBeTheReferenceToTheCacheObject;
begin
  var MyClass := TManyValueParent.Create;
  MyClass.Childs := [TManyValueChild.Create];
  var MyClassCache := TManyValueParent.Create;
  var Query := CreateQueryBuilder(MyClassCache, 0);

  Query.Update(MyClass);

  Assert.AreEqual<Pointer>(MyClassCache, MyClassCache.Childs[0].Parent);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdatingAClassMustInsertOnlyTheForeignKeyWithUpdateCascadeAttribute;
begin
  var Database := TDatabaseTest.Create(TCursorMock.Create([[1], [2]]));
  var MyClass := TClassWithCascadeAttribute.Create;
  MyClass.InsertCascade := TClassWithCascadeForeignClass.Create;
  MyClass.UpdateCascade := TClassWithCascadeForeignClass.Create;
  MyClass.UpdateInsertCascade := TClassWithCascadeForeignClass.Create;
  var Query := CreateQueryBuilder(Database, TClassWithCascadeAttribute.Create, 0);

  Query.Update(MyClass);

  Assert.AreEqual(
    'insert into ClassWithCascadeForeignClass(Value)values(0)'#13#10 +
    'insert into ClassWithCascadeForeignClass(Value)values(0)'#13#10 +
    'update ClassWithCascadeAttribute set IdInsertCascade=0,IdUpdateCascade=1,IdUpdateInsertCascade=2 where Id=0', Database.SQL);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdatingTheCachedObjectCantDestroyTheObject;
begin
  var MyClass := TMock.CreateClass<TClassWithPrimaryKey>(nil, True);
  MyClass.Instance.Id := 123;
  var Query := CreateQueryBuilder(MyClass.Instance, '123');

  MyClass.Expect.Never.When.BeforeDestruction;

  Query.Update(MyClass.Instance);

  Assert.CheckExpectation(MyClass.CheckExpectations);

  Query.Free;
end;

procedure TQueryBuilderDataManipulationTest.WhenUpdatingTheCachedObjectMustUpdateAllFieldsFromTheClass;
begin
  var Connection := CreateDatabaseConnection;
  var MyClass := TClassWithPrimaryKey.Create;
  MyClass.Id := 123;
  MyClass.Value := 456;
  var Query := CreateQueryBuilder(Connection, MyClass, '123');

  Query.Update(MyClass);

  Assert.AreEqual('update ClassWithPrimaryKey set Value=456 where Id=123', Connection.SQL);

  Query.Free;
end;

{ TQueryBuilderOrderByTeste }

procedure TQueryBuilderOrderByTeste.EveryTimeTheFieldFunctionFromOrderByIsCalledMustAddTheFieldList;
begin
  var OrderBy := TQueryBuilderOrderBy<TObject>.Create;

  OrderBy.Field('A');

  OrderBy.Field('B');

  OrderBy.Field('C');

  Assert.AreEqual<Integer>(3, Length(OrderBy.Fields));

  OrderBy.Free;
end;

procedure TQueryBuilderOrderByTeste.SetupFixture;
begin
  TMapper.Default.LoadAll;
end;

procedure TQueryBuilderOrderByTeste.WhenCallTheFieldFunctionMustAddTheFieldAliasToTheFieldList;
begin
  var OrderBy := TQueryBuilderOrderBy<TObject>.Create;

  OrderBy.Field('A');

  Assert.AreEqual('A', OrderBy.Fields[0].FieldNames[0]);

  OrderBy.Free;
end;

procedure TQueryBuilderOrderByTeste.WhenCallTheFieldProcedureMustResultTheSelfOfTheOrderByClass;
begin
  var OrderBy := TQueryBuilderOrderBy<TObject>.Create;

  Assert.AreEqual(OrderBy, OrderBy.Field('A'));

  OrderBy.Free;
end;

procedure TQueryBuilderOrderByTeste.WhenTheFieldIsDescendingMustLoadTheSQLAsExpected;
begin
  var Database := CreateDatabaseConnection;
  var Query := CreateQueryBuilder(Database);

  var OrderBy := Query.Select.All.From<TMyTestClass>.OrderBy;

  OrderBy.Field('Value', False);

  Assert.AreEqual(' order by T1.Value desc', OrderBy.GetSQL);

  Query.Free;
end;

procedure TQueryBuilderOrderByTeste.WhenTheFieldListIsEmptyMustReturnAnEmptySQLValue;
begin
  var OrderBy := TQueryBuilderOrderBy<TObject>.Create;

  Assert.AreEqual(EmptyStr, OrderBy.GetSQL);

  OrderBy.Free;
end;

procedure TQueryBuilderOrderByTeste.WhenTheFieldListIsNotEmptyMustReturnTheOrderByClauseWithTheFieldList;
begin
  var Query := CreateQueryBuilder;

  var OrderBy := Query.Select.All.From<TMyTestClass>.OrderBy;

  OrderBy.Field('Value');

  OrderBy.Field('Value');

  OrderBy.Field('Value');

  Assert.AreEqual(' order by T1.Value,T1.Value,T1.Value', OrderBy.GetSQL);

  Query.Free;
end;

{ TQueryBuilderFieldAliasTest }

procedure TQueryBuilderFieldAliasTest.WhenCreateMustLoadThePropertyFieldNameOfTheClass;
begin
  var Field := TQueryBuilderFieldAlias.Create('Test');

  Assert.AreEqual('Test', Field.FieldName);

  Field.Free;
end;

procedure TQueryBuilderFieldAliasTest.WhenTheFieldNameIsSeparetedByDotMustLoadTheFieldNamesWithTheNames;
begin
  var Field := TQueryBuilderFieldAlias.Create('Test1.Test2.Test3');

  Assert.AreEqual('Test1', Field.FieldNames[0]);
  Assert.AreEqual('Test2', Field.FieldNames[1]);
  Assert.AreEqual('Test3', Field.FieldNames[2]);

  Field.Free;
end;

{ TQueryBuilderFromTest }

procedure TQueryBuilderFromTest.Setup;
begin
  TMapper.Default.LoadAll;
end;

procedure TQueryBuilderFromTest.WhenCallFromFunctionMustLoadTheTablePropertyWithTheDataOfThatTable;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TClassWithTwoForeignKey>;

  Assert.AreNotEqual<Pointer>(nil, Query.Table);

  Query.Free;
end;

procedure TQueryBuilderFromTest.WhenCallFromFunctionWithAClassWithTwoForeignKeyAndOneOfThisIsSettedOfPrimaryKeyAttributeMustGenerateJoinComparingRightAliasLikePrimaryKeyOfClassForeign;
begin
  var Query := TQueryBuilderFrom.Create(nil, 1);

  Query.From<TClassWithTwoForeignKeyAndOneIsAPrimaryKey>;

  var ExpectedSQL := ' from ClassWithTwoForeignKeyAndOneIsAPrimaryKey T1 ' +
  'left join ClassWithPrimaryKey T2 on T1.IdAnotherClass=T2.Id ' +
  'left join ClassWithPrimaryKey T3 on T1.IdAnotherClass2=T3.Id';

  Assert.AreEqual(ExpectedSQL, Query.GetSQL);

  Query.Free;
end;

end.

