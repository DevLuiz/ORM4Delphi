unit Delphi.ORM.Attributes;

interface

uses System.Rtti;

type
  TDatabaseInternalFunction = (difNotDefined, difNow, difNewUniqueIdentifier, difNewGuid);
  TDatabaseSpecialType = (stNotDefined, stDate, stDateTime, stTime, stText, stUniqueIdentifier);

  EntityAttribute = class(TCustomAttribute);

  TCustomNameAttribute = class(TCustomAttribute)
  private
    FName: String;
  public
    constructor Create(const Name: String);

    property Name: String read FName;
  end;

  AutoGeneratedAttribute = class(TCustomAttribute);
  FieldNameAttribute = class(TCustomNameAttribute);
  ForeignKeyNameAttribute = class(TCustomNameAttribute);
  ManyValueAssociationLinkNameAttribute = class(TCustomNameAttribute);
  PrimaryKeyAttribute = class(TCustomNameAttribute);
  TableNameAttribute = class(TCustomNameAttribute);

  IndexAttribute = class(TCustomNameAttribute)
  private
    FFields: String;
  public
    constructor Create(const Name, Fields: String);

    property Fields: String read FFields;
  end;

  UniqueKeyAttribute = class(IndexAttribute);

  DefaultValueAttribute = class(TCustomAttribute)
  private
    FInternalFunction: TDatabaseInternalFunction;
    FValue: String;
  public
    constructor Create(const AValue: String); overload;
    constructor Create(const InternalFunction: TDatabaseInternalFunction); overload;

    property InternalFunction: TDatabaseInternalFunction read FInternalFunction;
    property Value: String read FValue;
  end;

  FieldInfoAttribute = class(TCustomAttribute)
  private
    FPrecision: Word;
    FScale: Word;
    FSize: Word;
    FSpecialType: TDatabaseSpecialType;

    constructor Create(const SpecialType: TDatabaseSpecialType; const Size, Scale: Word); overload;
  public
    constructor Create(const Precision, Scale: Word); overload;
    constructor Create(const Size: Word); overload;
    constructor Create(const SpecialType: TDatabaseSpecialType); overload;

    property Precision: Word read FPrecision;
    property Scale: Word read FScale;
    property Size: Word read FSize;
    property SpecialType: TDatabaseSpecialType read FSpecialType;
  end;

  RequiredAttribute = class(TCustomAttribute)
  end;

implementation

{ TCustomNameAttribute }

constructor TCustomNameAttribute.Create(const Name: String);
begin
  inherited Create;

  FName := Name;
end;

{ DefaultValueAttribute }

constructor DefaultValueAttribute.Create(const AValue: String);
begin
  inherited Create;

  FValue := AValue;
end;

constructor DefaultValueAttribute.Create(const InternalFunction: TDatabaseInternalFunction);
begin
  inherited Create;

  FInternalFunction := InternalFunction;
end;

{ IndexAttribute }

constructor IndexAttribute.Create(const Name, Fields: String);
begin
  inherited Create(Name);

  FFields := Fields;
end;

{ FieldInfoAttribute }

constructor FieldInfoAttribute.Create(const Precision, Scale: Word);
begin
  Create(stNotDefined, Precision, Scale);
end;

constructor FieldInfoAttribute.Create(const Size: Word);
begin
  Create(stNotDefined, Size, 0);
end;

constructor FieldInfoAttribute.Create(const SpecialType: TDatabaseSpecialType);
begin
  Create(SpecialType, 0, 0);
end;

constructor FieldInfoAttribute.Create(const SpecialType: TDatabaseSpecialType; const Size, Scale: Word);
begin
  inherited Create;

  FScale := Scale;
  FSize := Size;
  FSpecialType := SpecialType;
end;

end.

